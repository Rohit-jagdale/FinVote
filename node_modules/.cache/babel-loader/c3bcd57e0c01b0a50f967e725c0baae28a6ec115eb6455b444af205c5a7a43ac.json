{"ast":null,"code":"\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// import { contractAbi, contractAddress } from './constant';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(true);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState('');\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n\n//     const getContract = useCallback(async () => {\n//         if (!provider) return null;\n//         const signer = provider.getSigner();\n//         return new ethers.Contract(contractAddress, contractAbi, signer);\n//     }, [provider]);\n\n//     const fetchInitialData = useCallback(async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const [candidatesList, time, status] = await Promise.all([\n//                 contract.getAllVotesOfCandidates(),\n//                 contract.getRemainingTime(),\n//                 contract.getVotingStatus()\n//             ]);\n\n//             if (Array.isArray(candidatesList)) {\n//                 const formattedCandidates = candidatesList.map((candidate, index) => ({\n//                     index,\n//                     name: candidate.name,\n//                     voteCount: candidate.voteCount.toNumber(),\n//                     party: candidate.party,\n//                     area: candidate.area\n//                 }));\n//                 setCandidates(formattedCandidates);\n//             }\n\n//             setRemainingTime(parseInt(time.toString(), 10));\n//             setVotingStatus(status);\n//         } catch (error) {\n//             console.error('Error fetching initial data:', error);\n//         }\n//     }, [getContract]);\n\n//     useEffect(() => {\n//         if (provider) {\n//             fetchInitialData();\n//         }\n//     }, [provider, fetchInitialData]);\n\n//     useEffect(() => {\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//             }\n//         };\n//     }, []);\n\n// const fetchCitizenData = async (aadhar) => {\n//     if (aadhar === \"\") {\n//         setError(\"Aadhaar Number is required.\");\n//         return;\n//     }\n\n//     try {\n//         const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n//         setCitizenData(response.data);\n//         setError(\"\");\n//     } catch (error) {\n//         console.error('Error fetching citizen data:', error);\n//         setError(\"User not found or server error.\");\n//         setCitizenData(null);\n//     }\n// };\n\n//     const vote = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.vote(number);\n//             await tx.wait();\n//             await checkVotingEligibility();\n//             await fetchInitialData();\n//         } catch (error) {\n//             console.error(\"Error voting:\", error);\n//         }\n//     };\n\n//     const checkVotingEligibility = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const voteStatus = await contract.voters(account);\n//             setCanVote(voteStatus);\n//         } catch (error) {\n//             console.error(\"Error checking eligibility:\", error);\n//         }\n//     };\n\n//     const handleAccountsChanged = (accounts) => {\n//         if (accounts.length > 0 && account !== accounts[0]) {\n//             setAccount(accounts[0]);\n//             checkVotingEligibility();\n//         } else {\n//             setIsConnected(false);\n//             setAccount(null);\n//         }\n//     };\n\n//     const connectToMetamask = async () => {\n//         if (!window.ethereum) {\n//             console.error(\"Metamask is not detected in the browser\");\n//             return;\n//         }\n\n//         try {\n//             const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//             await web3Provider.send(\"eth_requestAccounts\", []);\n//             const signer = web3Provider.getSigner();\n//             const address = await signer.getAddress();\n\n//             setProvider(web3Provider);\n//             setAccount(address);\n//             setIsConnected(true);\n\n//             console.log(\"Metamask Connected : \" + address);\n//         } catch (err) {\n//             console.error(\"Connection error:\", err);\n//         }\n//     };\n\n//     const addCandidate = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.addCandidate(\n//                 newCandidateName, \n//                 newCandidateParty, \n//                 newCandidateArea, \n//                 { gasLimit: 500000 }\n//             );\n//             await tx.wait();\n//             await fetchInitialData();\n//         } catch (err) {\n//             console.error(\"Error adding candidate:\", err.message);\n//         }\n//     };\n\n//     const getResult = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return { name: '', voteCount: 0 };\n\n//             const result = await contract.getResults();\n\n//             if (!Array.isArray(result) || result.length < 2) {\n//                 return { name: '', voteCount: 0 };\n//             }\n\n//             const [winningCandidate, winningVoteCount] = result;\n//             return {\n//                 name: winningCandidate || '',\n//                 voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//             };\n//         } catch (error) {\n//             console.error('Error getting results:', error);\n//             return { name: '', voteCount: 0 };\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             {votingStatus ? (\n//                 isConnected ? (\n//                     <Connected\n//                         account={account}\n//                         candidates={candidates}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData}\n//                         remainingTime={remainingTime}\n//                         number={number}\n//                         handleNumberChange={(e) => setNumber(e.target.value)}\n//                         voteFunction={vote}\n//                         showButton={canVote}\n//                         addCandidate={addCandidate}\n//                         handleCandidateNameChange={(e) => setNewCandidateName(e.target.value)}\n//                         newCandidateName={newCandidateName}\n//                         newCandidateParty={newCandidateParty}\n//                         setNewCandidateParty={setNewCandidateParty}\n//                         newCandidateArea={newCandidateArea}\n//                         setNewCandidateArea={setNewCandidateArea}\n//                         onWalletAddressChange={() => {\n//                             setIsConnected(false);\n//                             setAccount(null);\n//                         }}\n//                     />\n//                 ) : (\n//                     <Login\n//                         connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                         setError={setError} \n//                     />\n//                 )\n//             ) : (\n//                 <Finished getResult={getResult} />\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Voting;","map":{"version":3,"names":[],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js"],"sourcesContent":["\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// import { contractAbi, contractAddress } from './constant';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(true);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState('');\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n\n//     const getContract = useCallback(async () => {\n//         if (!provider) return null;\n//         const signer = provider.getSigner();\n//         return new ethers.Contract(contractAddress, contractAbi, signer);\n//     }, [provider]);\n\n//     const fetchInitialData = useCallback(async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const [candidatesList, time, status] = await Promise.all([\n//                 contract.getAllVotesOfCandidates(),\n//                 contract.getRemainingTime(),\n//                 contract.getVotingStatus()\n//             ]);\n\n//             if (Array.isArray(candidatesList)) {\n//                 const formattedCandidates = candidatesList.map((candidate, index) => ({\n//                     index,\n//                     name: candidate.name,\n//                     voteCount: candidate.voteCount.toNumber(),\n//                     party: candidate.party,\n//                     area: candidate.area\n//                 }));\n//                 setCandidates(formattedCandidates);\n//             }\n\n//             setRemainingTime(parseInt(time.toString(), 10));\n//             setVotingStatus(status);\n//         } catch (error) {\n//             console.error('Error fetching initial data:', error);\n//         }\n//     }, [getContract]);\n\n//     useEffect(() => {\n//         if (provider) {\n//             fetchInitialData();\n//         }\n//     }, [provider, fetchInitialData]);\n\n//     useEffect(() => {\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//             }\n//         };\n//     }, []);\n\n    // const fetchCitizenData = async (aadhar) => {\n    //     if (aadhar === \"\") {\n    //         setError(\"Aadhaar Number is required.\");\n    //         return;\n    //     }\n\n    //     try {\n    //         const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n    //         setCitizenData(response.data);\n    //         setError(\"\");\n    //     } catch (error) {\n    //         console.error('Error fetching citizen data:', error);\n    //         setError(\"User not found or server error.\");\n    //         setCitizenData(null);\n    //     }\n    // };\n\n//     const vote = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.vote(number);\n//             await tx.wait();\n//             await checkVotingEligibility();\n//             await fetchInitialData();\n//         } catch (error) {\n//             console.error(\"Error voting:\", error);\n//         }\n//     };\n\n//     const checkVotingEligibility = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const voteStatus = await contract.voters(account);\n//             setCanVote(voteStatus);\n//         } catch (error) {\n//             console.error(\"Error checking eligibility:\", error);\n//         }\n//     };\n\n//     const handleAccountsChanged = (accounts) => {\n//         if (accounts.length > 0 && account !== accounts[0]) {\n//             setAccount(accounts[0]);\n//             checkVotingEligibility();\n//         } else {\n//             setIsConnected(false);\n//             setAccount(null);\n//         }\n//     };\n\n//     const connectToMetamask = async () => {\n//         if (!window.ethereum) {\n//             console.error(\"Metamask is not detected in the browser\");\n//             return;\n//         }\n\n//         try {\n//             const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//             await web3Provider.send(\"eth_requestAccounts\", []);\n//             const signer = web3Provider.getSigner();\n//             const address = await signer.getAddress();\n\n//             setProvider(web3Provider);\n//             setAccount(address);\n//             setIsConnected(true);\n            \n//             console.log(\"Metamask Connected : \" + address);\n//         } catch (err) {\n//             console.error(\"Connection error:\", err);\n//         }\n//     };\n\n//     const addCandidate = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.addCandidate(\n//                 newCandidateName, \n//                 newCandidateParty, \n//                 newCandidateArea, \n//                 { gasLimit: 500000 }\n//             );\n//             await tx.wait();\n//             await fetchInitialData();\n//         } catch (err) {\n//             console.error(\"Error adding candidate:\", err.message);\n//         }\n//     };\n\n//     const getResult = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return { name: '', voteCount: 0 };\n\n//             const result = await contract.getResults();\n            \n//             if (!Array.isArray(result) || result.length < 2) {\n//                 return { name: '', voteCount: 0 };\n//             }\n\n//             const [winningCandidate, winningVoteCount] = result;\n//             return {\n//                 name: winningCandidate || '',\n//                 voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//             };\n//         } catch (error) {\n//             console.error('Error getting results:', error);\n//             return { name: '', voteCount: 0 };\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             {votingStatus ? (\n//                 isConnected ? (\n//                     <Connected\n//                         account={account}\n//                         candidates={candidates}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData}\n//                         remainingTime={remainingTime}\n//                         number={number}\n//                         handleNumberChange={(e) => setNumber(e.target.value)}\n//                         voteFunction={vote}\n//                         showButton={canVote}\n//                         addCandidate={addCandidate}\n//                         handleCandidateNameChange={(e) => setNewCandidateName(e.target.value)}\n//                         newCandidateName={newCandidateName}\n//                         newCandidateParty={newCandidateParty}\n//                         setNewCandidateParty={setNewCandidateParty}\n//                         newCandidateArea={newCandidateArea}\n//                         setNewCandidateArea={setNewCandidateArea}\n//                         onWalletAddressChange={() => {\n//                             setIsConnected(false);\n//                             setAccount(null);\n//                         }}\n//                     />\n//                 ) : (\n//                     <Login\n//                         connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                         setError={setError} \n//                     />\n//                 )\n//             ) : (\n//                 <Finished getResult={getResult} />\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Voting;\n\n\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}