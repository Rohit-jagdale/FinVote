{"ast":null,"code":"// import React from 'react'\n// import { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { ethers } from 'ethers';\n// import { contractAbi, contractAddress } from './constant';\n// // import Login from './Components/Login.jsx';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(false);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState(''); // New state for candidate party\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n\n//     useEffect(() => {\n//       getCandidates();\n//       getRemainingTime();\n//       getCurrentStatus();\n\n//       if (window.ethereum) {\n//         window.ethereum.on('accountsChanged', handleAccountsChanged);\n//       }\n\n//       return () => {\n//         if (window.ethereum) {\n//           window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//         }\n//       };\n//     }, []);\n\n//   // Function to fetch citizen data\n//     const fetchCitizenData = async (aadhar) => {\n//       if (aadhar === \"\") {\n//         setError(\"Aadhaar Number is required.\");\n//         return;\n//       }\n\n//       try {\n//         const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n//         setCitizenData(response.data); // Set the retrieved citizen data\n//         setError(\"\"); // Clear error message\n//       } catch (error) {\n//         console.error('Error fetching citizen data:', error);\n//         setError(\"User not found or server error.\");\n//         setCitizenData(null); // Clear citizen data if user not found\n//       }\n//     };\n\n//     async function vote() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n\n//       const tx = await contractInstance.vote(number);\n//       await tx.wait();\n//       checkVotingEligibility();\n//     }\n\n//     async function checkVotingEligibility() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//       const voteStatus = await contractInstance.voters(await signer.getAddress());\n//       setCanVote(voteStatus);\n//     }\n\n//     // async function getCandidates() {\n//     //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     //   await provider.send(\"eth_requestAccounts\", []);\n//     //   const signer = provider.getSigner();\n//     //   const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//     //   const candidatesList = await contractInstance.getAllVotesOfCandidates();\n//     //   const formattedCandidates = candidatesList.map((candidate, index) => ({\n//     //     index,\n//     //     name: candidate.name,\n//     //     voteCount: candidate.voteCount.toNumber(),\n//     //     party: candidate.party, // Assuming party is included in the candidate object\n//     //     area: candidate.area // Assuming area is included in the candidate object\n//     //   }));\n//     //   setCandidates(formattedCandidates);\n//     // }\n\n//     async function getCandidates() {\n//         try {\n//           const provider = new ethers.providers.Web3Provider(window.ethereum);\n//           await provider.send(\"eth_requestAccounts\", []);\n//           const signer = provider.getSigner();\n//           const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//           const candidatesList = await contractInstance.getAllVotesOfCandidates();\n\n//           // Check if candidatesList is an array\n//           if (!Array.isArray(candidatesList)) {\n//             console.error('Expected array but received:', candidatesList);\n//             setCandidates([]);\n//             return;\n//           }\n\n//           const formattedCandidates = candidatesList.map((candidate, index) => ({\n//             index,\n//             name: candidate.name,\n//             voteCount: candidate.voteCount.toNumber(),\n//             party: candidate.party,\n//             area: candidate.area\n//           }));\n//           setCandidates(formattedCandidates);\n//         } catch (error) {\n//           console.error('Error getting candidates:', error);\n//           setCandidates([]);\n//         }\n//       }\n\n//     async function getCurrentStatus() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//       const status = await contractInstance.getVotingStatus();\n//       setVotingStatus(status);\n//     }\n\n//     async function getRemainingTime() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//       const time = await contractInstance.getRemainingTime();\n//       setRemainingTime(parseInt(time.toString(), 10));\n//     }\n\n//     function handleAccountsChanged(accounts) {\n//       if (accounts.length > 0 && account !== accounts[0]) {\n//         setAccount(accounts[0]);\n//         checkVotingEligibility();\n//       } else {\n//         setIsConnected(false);\n//         setAccount(null);\n//       }\n//     }\n\n//     async function connectToMetamask() {\n//       if (window.ethereum) {\n//         try {\n//           const provider = new ethers.providers.Web3Provider(window.ethereum);\n//           setProvider(provider);\n//           await provider.send(\"eth_requestAccounts\", []);\n//           const signer = provider.getSigner();\n//           const address = await signer.getAddress();\n//           setAccount(address);\n//           console.log(\"Metamask Connected : \" + address);\n//           setIsConnected(true);\n//           checkVotingEligibility();\n//         } catch (err) {\n//           console.error(err);\n//         }\n//       } else {\n//         console.error(\"Metamask is not detected in the browser\");\n//       }\n//     }\n\n//     function handleNumberChange(e) {\n//       setNumber(e.target.value);\n//     }\n\n//     function handleCandidateNameChange(e) {\n//       setNewCandidateName(e.target.value);\n//     }\n\n//     async function addCandidate() {\n//       try {\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         await provider.send(\"eth_requestAccounts\", []);\n//         const signer = provider.getSigner();\n//         const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n\n//         const tx = await contractInstance.addCandidate(newCandidateName, newCandidateParty, newCandidateArea, { gasLimit: 500000 });\n//         await tx.wait();\n//         getCandidates(); // Refresh the list of candidates\n//       } catch (err) {\n//         console.error(\"Error adding candidate:\", err.message);\n//       }\n//     }\n\n//     // async function getResult() {\n//     //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     //   await provider.send(\"eth_requestAccounts\", []);\n//     //   const signer = provider.getSigner();\n//     //   const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n\n//     //   const [winningCandidate, winningVoteCount] = await contractInstance.getResults();\n//     //   return { name: winningCandidate, voteCount: winningVoteCount.toNumber() };\n//     // }\n//     async function getResult() {\n//         try {\n//           const provider = new ethers.providers.Web3Provider(window.ethereum);\n//           await provider.send(\"eth_requestAccounts\", []);\n//           const signer = provider.getSigner();\n//           const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n\n//           const result = await contractInstance.getResults();\n\n//           // Check if result is an array with at least 2 elements\n//           if (!Array.isArray(result) || result.length < 2) {\n//             console.error('Invalid result format:', result);\n//             return { name: '', voteCount: 0 };\n//           }\n\n//           const [winningCandidate, winningVoteCount] = result;\n//           return {\n//             name: winningCandidate || '',\n//             voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//           };\n//         } catch (error) {\n//           console.error('Error getting results:', error);\n//           return { name: '', voteCount: 0 };\n//         }\n//       }\n\n//     function handleWalletAddressChange() {\n//       setIsConnected(false); // Log the user out by setting isConnected to false\n//       setAccount(null); // Clear the account info\n//     }\n\n//     return (\n//       <div className=\"App\">\n//         {votingStatus ? (\n//           isConnected ? (\n//             <Connected\n//               account={account}\n//               candidates={candidates}\n//               fetchCitizenData={fetchCitizenData}\n//               citizenData={citizenData}\n//               remainingTime={remainingTime}\n//               number={number}\n//               handleNumberChange={handleNumberChange}\n//               voteFunction={vote}\n//               showButton={canVote}\n//               addCandidate={addCandidate}\n//               handleCandidateNameChange={handleCandidateNameChange}\n//               newCandidateName={newCandidateName}\n//               newCandidateParty={newCandidateParty}\n//               setNewCandidateParty={setNewCandidateParty}\n//               newCandidateArea={newCandidateArea}\n//               setNewCandidateArea={setNewCandidateArea}\n//               onWalletAddressChange={handleWalletAddressChange} // Pass the new function here\n//             />\n//           ) : (\n//             <Login connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                   setError={setError} \n\n//                         />\n//           )\n//         ) : (\n//           <Finished getResult={getResult} />\n//         )}\n//       </div>\n//     );\n\n//     // return (\n//     //   <div className=\"App\">\n//     //     {votingStatus ? (\n//     //       <Finished getResult={getResult} />\n//     //     ) : (\n//     //       isConnected ? (\n//     //         <Connected\n//     //           account={account}\n//     //           candidates={candidates}\n//     //           fetchCitizenData={fetchCitizenData}\n//     //           citizenData={citizenData}\n//     //           remainingTime={remainingTime}\n//     //           number={number}\n//     //           handleNumberChange={handleNumberChange}\n//     //           voteFunction={vote}\n//     //           showButton={canVote}\n//     //           addCandidate={addCandidate}\n//     //           handleCandidateNameChange={handleCandidateNameChange}\n//     //           newCandidateName={newCandidateName}\n//     //           newCandidateParty={newCandidateParty}\n//     //           setNewCandidateParty={setNewCandidateParty}\n//     //           newCandidateArea={newCandidateArea}\n//     //           setNewCandidateArea={setNewCandidateArea}\n//     //           onWalletAddressChange={handleWalletAddressChange} // Pass the new function here\n//     //         />\n//     //       ) : (\n//     //         <Login connectWallet={connectToMetamask}\n//     //                     fetchCitizenData={fetchCitizenData}\n//     //                     citizenData={citizenData} \n//     //                     error={error} \n//     //               setError={setError} \n\n//     //                     />\n//     //       )\n//     //     )}\n//     //   </div>\n//     // );\n// }\n\n// export default Voting;","map":{"version":3,"names":[],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js"],"sourcesContent":["// import React from 'react'\n// import { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { ethers } from 'ethers';\n// import { contractAbi, contractAddress } from './constant';\n// // import Login from './Components/Login.jsx';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(false);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState(''); // New state for candidate party\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n  \n//     useEffect(() => {\n//       getCandidates();\n//       getRemainingTime();\n//       getCurrentStatus();\n  \n//       if (window.ethereum) {\n//         window.ethereum.on('accountsChanged', handleAccountsChanged);\n//       }\n  \n//       return () => {\n//         if (window.ethereum) {\n//           window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//         }\n//       };\n//     }, []);\n  \n  \n//   // Function to fetch citizen data\n//     const fetchCitizenData = async (aadhar) => {\n//       if (aadhar === \"\") {\n//         setError(\"Aadhaar Number is required.\");\n//         return;\n//       }\n  \n//       try {\n//         const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n//         setCitizenData(response.data); // Set the retrieved citizen data\n//         setError(\"\"); // Clear error message\n//       } catch (error) {\n//         console.error('Error fetching citizen data:', error);\n//         setError(\"User not found or server error.\");\n//         setCitizenData(null); // Clear citizen data if user not found\n//       }\n//     };\n  \n//     async function vote() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n  \n//       const tx = await contractInstance.vote(number);\n//       await tx.wait();\n//       checkVotingEligibility();\n//     }\n  \n//     async function checkVotingEligibility() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//       const voteStatus = await contractInstance.voters(await signer.getAddress());\n//       setCanVote(voteStatus);\n//     }\n  \n//     // async function getCandidates() {\n//     //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     //   await provider.send(\"eth_requestAccounts\", []);\n//     //   const signer = provider.getSigner();\n//     //   const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//     //   const candidatesList = await contractInstance.getAllVotesOfCandidates();\n//     //   const formattedCandidates = candidatesList.map((candidate, index) => ({\n//     //     index,\n//     //     name: candidate.name,\n//     //     voteCount: candidate.voteCount.toNumber(),\n//     //     party: candidate.party, // Assuming party is included in the candidate object\n//     //     area: candidate.area // Assuming area is included in the candidate object\n//     //   }));\n//     //   setCandidates(formattedCandidates);\n//     // }\n\n//     async function getCandidates() {\n//         try {\n//           const provider = new ethers.providers.Web3Provider(window.ethereum);\n//           await provider.send(\"eth_requestAccounts\", []);\n//           const signer = provider.getSigner();\n//           const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//           const candidatesList = await contractInstance.getAllVotesOfCandidates();\n          \n//           // Check if candidatesList is an array\n//           if (!Array.isArray(candidatesList)) {\n//             console.error('Expected array but received:', candidatesList);\n//             setCandidates([]);\n//             return;\n//           }\n      \n//           const formattedCandidates = candidatesList.map((candidate, index) => ({\n//             index,\n//             name: candidate.name,\n//             voteCount: candidate.voteCount.toNumber(),\n//             party: candidate.party,\n//             area: candidate.area\n//           }));\n//           setCandidates(formattedCandidates);\n//         } catch (error) {\n//           console.error('Error getting candidates:', error);\n//           setCandidates([]);\n//         }\n//       }\n  \n//     async function getCurrentStatus() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//       const status = await contractInstance.getVotingStatus();\n//       setVotingStatus(status);\n//     }\n  \n//     async function getRemainingTime() {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       await provider.send(\"eth_requestAccounts\", []);\n//       const signer = provider.getSigner();\n//       const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n//       const time = await contractInstance.getRemainingTime();\n//       setRemainingTime(parseInt(time.toString(), 10));\n//     }\n  \n//     function handleAccountsChanged(accounts) {\n//       if (accounts.length > 0 && account !== accounts[0]) {\n//         setAccount(accounts[0]);\n//         checkVotingEligibility();\n//       } else {\n//         setIsConnected(false);\n//         setAccount(null);\n//       }\n//     }\n  \n//     async function connectToMetamask() {\n//       if (window.ethereum) {\n//         try {\n//           const provider = new ethers.providers.Web3Provider(window.ethereum);\n//           setProvider(provider);\n//           await provider.send(\"eth_requestAccounts\", []);\n//           const signer = provider.getSigner();\n//           const address = await signer.getAddress();\n//           setAccount(address);\n//           console.log(\"Metamask Connected : \" + address);\n//           setIsConnected(true);\n//           checkVotingEligibility();\n//         } catch (err) {\n//           console.error(err);\n//         }\n//       } else {\n//         console.error(\"Metamask is not detected in the browser\");\n//       }\n//     }\n  \n//     function handleNumberChange(e) {\n//       setNumber(e.target.value);\n//     }\n  \n//     function handleCandidateNameChange(e) {\n//       setNewCandidateName(e.target.value);\n//     }\n  \n//     async function addCandidate() {\n//       try {\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         await provider.send(\"eth_requestAccounts\", []);\n//         const signer = provider.getSigner();\n//         const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n  \n//         const tx = await contractInstance.addCandidate(newCandidateName, newCandidateParty, newCandidateArea, { gasLimit: 500000 });\n//         await tx.wait();\n//         getCandidates(); // Refresh the list of candidates\n//       } catch (err) {\n//         console.error(\"Error adding candidate:\", err.message);\n//       }\n//     }\n  \n//     // async function getResult() {\n//     //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     //   await provider.send(\"eth_requestAccounts\", []);\n//     //   const signer = provider.getSigner();\n//     //   const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n  \n//     //   const [winningCandidate, winningVoteCount] = await contractInstance.getResults();\n//     //   return { name: winningCandidate, voteCount: winningVoteCount.toNumber() };\n//     // }\n//     async function getResult() {\n//         try {\n//           const provider = new ethers.providers.Web3Provider(window.ethereum);\n//           await provider.send(\"eth_requestAccounts\", []);\n//           const signer = provider.getSigner();\n//           const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      \n//           const result = await contractInstance.getResults();\n          \n//           // Check if result is an array with at least 2 elements\n//           if (!Array.isArray(result) || result.length < 2) {\n//             console.error('Invalid result format:', result);\n//             return { name: '', voteCount: 0 };\n//           }\n      \n//           const [winningCandidate, winningVoteCount] = result;\n//           return {\n//             name: winningCandidate || '',\n//             voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//           };\n//         } catch (error) {\n//           console.error('Error getting results:', error);\n//           return { name: '', voteCount: 0 };\n//         }\n//       }\n  \n//     function handleWalletAddressChange() {\n//       setIsConnected(false); // Log the user out by setting isConnected to false\n//       setAccount(null); // Clear the account info\n//     }\n  \n  \n//     return (\n//       <div className=\"App\">\n//         {votingStatus ? (\n//           isConnected ? (\n//             <Connected\n//               account={account}\n//               candidates={candidates}\n//               fetchCitizenData={fetchCitizenData}\n//               citizenData={citizenData}\n//               remainingTime={remainingTime}\n//               number={number}\n//               handleNumberChange={handleNumberChange}\n//               voteFunction={vote}\n//               showButton={canVote}\n//               addCandidate={addCandidate}\n//               handleCandidateNameChange={handleCandidateNameChange}\n//               newCandidateName={newCandidateName}\n//               newCandidateParty={newCandidateParty}\n//               setNewCandidateParty={setNewCandidateParty}\n//               newCandidateArea={newCandidateArea}\n//               setNewCandidateArea={setNewCandidateArea}\n//               onWalletAddressChange={handleWalletAddressChange} // Pass the new function here\n//             />\n//           ) : (\n//             <Login connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                   setError={setError} \n  \n//                         />\n//           )\n//         ) : (\n//           <Finished getResult={getResult} />\n//         )}\n//       </div>\n//     );\n\n\n\n//     // return (\n//     //   <div className=\"App\">\n//     //     {votingStatus ? (\n//     //       <Finished getResult={getResult} />\n//     //     ) : (\n//     //       isConnected ? (\n//     //         <Connected\n//     //           account={account}\n//     //           candidates={candidates}\n//     //           fetchCitizenData={fetchCitizenData}\n//     //           citizenData={citizenData}\n//     //           remainingTime={remainingTime}\n//     //           number={number}\n//     //           handleNumberChange={handleNumberChange}\n//     //           voteFunction={vote}\n//     //           showButton={canVote}\n//     //           addCandidate={addCandidate}\n//     //           handleCandidateNameChange={handleCandidateNameChange}\n//     //           newCandidateName={newCandidateName}\n//     //           newCandidateParty={newCandidateParty}\n//     //           setNewCandidateParty={setNewCandidateParty}\n//     //           newCandidateArea={newCandidateArea}\n//     //           setNewCandidateArea={setNewCandidateArea}\n//     //           onWalletAddressChange={handleWalletAddressChange} // Pass the new function here\n//     //         />\n//     //       ) : (\n//     //         <Login connectWallet={connectToMetamask}\n//     //                     fetchCitizenData={fetchCitizenData}\n//     //                     citizenData={citizenData} \n//     //                     error={error} \n//     //               setError={setError} \n        \n//     //                     />\n//     //       )\n//     //     )}\n//     //   </div>\n//     // );\n// }\n\n// export default Voting;\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}