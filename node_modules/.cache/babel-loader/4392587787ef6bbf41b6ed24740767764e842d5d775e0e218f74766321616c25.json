{"ast":null,"code":"/**\n * Convert from a Base64URL-encoded string to an Array Buffer. Best used when converting a\n * credential ID from a JSON string to an ArrayBuffer, like in allowCredentials or\n * excludeCredentials\n *\n * Helper method to compliment `bufferToBase64URLString`\n */\nexport function base64URLStringToBuffer(base64URLString) {\n  // Convert from Base64URL to Base64\n  const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n  /**\n   * Pad with '=' until it's a multiple of four\n   * (4 - (85 % 4 = 1) = 3) % 4 = 3 padding\n   * (4 - (86 % 4 = 2) = 2) % 4 = 2 padding\n   * (4 - (87 % 4 = 3) = 1) % 4 = 1 padding\n   * (4 - (88 % 4 = 0) = 4) % 4 = 0 padding\n   */\n  const padLength = (4 - base64.length % 4) % 4;\n  const padded = base64.padEnd(base64.length + padLength, '=');\n  // Convert to a binary string\n  const binary = atob(padded);\n  // Convert binary string to buffer\n  const buffer = new ArrayBuffer(binary.length);\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return buffer;\n}","map":{"version":3,"names":["base64URLStringToBuffer","base64URLString","base64","replace","padLength","length","padded","padEnd","binary","atob","buffer","ArrayBuffer","bytes","Uint8Array","i","charCodeAt"],"sources":["/Users/rohit/Desktop/projects/FinVote/node_modules/@simplewebauthn/browser/esm/helpers/base64URLStringToBuffer.js"],"sourcesContent":["/**\n * Convert from a Base64URL-encoded string to an Array Buffer. Best used when converting a\n * credential ID from a JSON string to an ArrayBuffer, like in allowCredentials or\n * excludeCredentials\n *\n * Helper method to compliment `bufferToBase64URLString`\n */\nexport function base64URLStringToBuffer(base64URLString) {\n    // Convert from Base64URL to Base64\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    /**\n     * Pad with '=' until it's a multiple of four\n     * (4 - (85 % 4 = 1) = 3) % 4 = 3 padding\n     * (4 - (86 % 4 = 2) = 2) % 4 = 2 padding\n     * (4 - (87 % 4 = 3) = 1) % 4 = 1 padding\n     * (4 - (88 % 4 = 0) = 4) % 4 = 0 padding\n     */\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    // Convert to a binary string\n    const binary = atob(padded);\n    // Convert binary string to buffer\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,uBAAuBA,CAACC,eAAe,EAAE;EACrD;EACA,MAAMC,MAAM,GAAGD,eAAe,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACpE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,SAAS,GAAG,CAAC,CAAC,GAAIF,MAAM,CAACG,MAAM,GAAG,CAAE,IAAI,CAAC;EAC/C,MAAMC,MAAM,GAAGJ,MAAM,CAACK,MAAM,CAACL,MAAM,CAACG,MAAM,GAAGD,SAAS,EAAE,GAAG,CAAC;EAC5D;EACA,MAAMI,MAAM,GAAGC,IAAI,CAACH,MAAM,CAAC;EAC3B;EACA,MAAMI,MAAM,GAAG,IAAIC,WAAW,CAACH,MAAM,CAACH,MAAM,CAAC;EAC7C,MAAMO,KAAK,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;EACpC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACH,MAAM,EAAES,CAAC,EAAE,EAAE;IACpCF,KAAK,CAACE,CAAC,CAAC,GAAGN,MAAM,CAACO,UAAU,CAACD,CAAC,CAAC;EACnC;EACA,OAAOJ,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}