{"ast":null,"code":"import { browserSupportsWebAuthn } from './browserSupportsWebAuthn.js';\n/**\n * Determine whether the browser can communicate with a built-in authenticator, like\n * Touch ID, Android fingerprint scanner, or Windows Hello.\n *\n * This method will _not_ be able to tell you the name of the platform authenticator.\n */\nexport function platformAuthenticatorIsAvailable() {\n  if (!browserSupportsWebAuthn()) {\n    return new Promise(resolve => resolve(false));\n  }\n  return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}","map":{"version":3,"names":["browserSupportsWebAuthn","platformAuthenticatorIsAvailable","Promise","resolve","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable"],"sources":["/Users/rohit/Desktop/projects/FinVote/node_modules/@simplewebauthn/browser/esm/helpers/platformAuthenticatorIsAvailable.js"],"sourcesContent":["import { browserSupportsWebAuthn } from './browserSupportsWebAuthn.js';\n/**\n * Determine whether the browser can communicate with a built-in authenticator, like\n * Touch ID, Android fingerprint scanner, or Windows Hello.\n *\n * This method will _not_ be able to tell you the name of the platform authenticator.\n */\nexport function platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return new Promise((resolve) => resolve(false));\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,8BAA8B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gCAAgCA,CAAA,EAAG;EAC/C,IAAI,CAACD,uBAAuB,CAAC,CAAC,EAAE;IAC5B,OAAO,IAAIE,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,KAAK,CAAC,CAAC;EACnD;EACA,OAAOC,mBAAmB,CAACC,6CAA6C,CAAC,CAAC;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}