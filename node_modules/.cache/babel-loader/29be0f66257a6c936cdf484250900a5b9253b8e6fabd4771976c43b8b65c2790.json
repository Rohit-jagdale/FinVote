{"ast":null,"code":"class BaseWebAuthnAbortService {\n  constructor() {\n    Object.defineProperty(this, \"controller\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  createNewAbortSignal() {\n    // Abort any existing calls to navigator.credentials.create() or navigator.credentials.get()\n    if (this.controller) {\n      const abortError = new Error('Cancelling existing WebAuthn API call for new one');\n      abortError.name = 'AbortError';\n      this.controller.abort(abortError);\n    }\n    const newController = new AbortController();\n    this.controller = newController;\n    return newController.signal;\n  }\n  cancelCeremony() {\n    if (this.controller) {\n      const abortError = new Error('Manually cancelling existing WebAuthn API call');\n      abortError.name = 'AbortError';\n      this.controller.abort(abortError);\n      this.controller = undefined;\n    }\n  }\n}\n/**\n * A service singleton to help ensure that only a single WebAuthn ceremony is active at a time.\n *\n * Users of **@simplewebauthn/browser** shouldn't typically need to use this, but it can help e.g.\n * developers building projects that use client-side routing to better control the behavior of\n * their UX in response to router navigation events.\n */\nexport const WebAuthnAbortService = new BaseWebAuthnAbortService();","map":{"version":3,"names":["BaseWebAuthnAbortService","constructor","Object","defineProperty","enumerable","configurable","writable","value","createNewAbortSignal","controller","abortError","Error","name","abort","newController","AbortController","signal","cancelCeremony","undefined","WebAuthnAbortService"],"sources":["/Users/rohit/Desktop/projects/FinVote/node_modules/@simplewebauthn/browser/esm/helpers/webAuthnAbortService.js"],"sourcesContent":["class BaseWebAuthnAbortService {\n    constructor() {\n        Object.defineProperty(this, \"controller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    createNewAbortSignal() {\n        // Abort any existing calls to navigator.credentials.create() or navigator.credentials.get()\n        if (this.controller) {\n            const abortError = new Error('Cancelling existing WebAuthn API call for new one');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n    cancelCeremony() {\n        if (this.controller) {\n            const abortError = new Error('Manually cancelling existing WebAuthn API call');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n            this.controller = undefined;\n        }\n    }\n}\n/**\n * A service singleton to help ensure that only a single WebAuthn ceremony is active at a time.\n *\n * Users of **@simplewebauthn/browser** shouldn't typically need to use this, but it can help e.g.\n * developers building projects that use client-side routing to better control the behavior of\n * their UX in response to router navigation events.\n */\nexport const WebAuthnAbortService = new BaseWebAuthnAbortService();\n"],"mappings":"AAAA,MAAMA,wBAAwB,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IACVC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE;MACtCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;EACN;EACAC,oBAAoBA,CAAA,EAAG;IACnB;IACA,IAAI,IAAI,CAACC,UAAU,EAAE;MACjB,MAAMC,UAAU,GAAG,IAAIC,KAAK,CAAC,mDAAmD,CAAC;MACjFD,UAAU,CAACE,IAAI,GAAG,YAAY;MAC9B,IAAI,CAACH,UAAU,CAACI,KAAK,CAACH,UAAU,CAAC;IACrC;IACA,MAAMI,aAAa,GAAG,IAAIC,eAAe,CAAC,CAAC;IAC3C,IAAI,CAACN,UAAU,GAAGK,aAAa;IAC/B,OAAOA,aAAa,CAACE,MAAM;EAC/B;EACAC,cAAcA,CAAA,EAAG;IACb,IAAI,IAAI,CAACR,UAAU,EAAE;MACjB,MAAMC,UAAU,GAAG,IAAIC,KAAK,CAAC,gDAAgD,CAAC;MAC9ED,UAAU,CAACE,IAAI,GAAG,YAAY;MAC9B,IAAI,CAACH,UAAU,CAACI,KAAK,CAACH,UAAU,CAAC;MACjC,IAAI,CAACD,UAAU,GAAGS,SAAS;IAC/B;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,IAAInB,wBAAwB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}