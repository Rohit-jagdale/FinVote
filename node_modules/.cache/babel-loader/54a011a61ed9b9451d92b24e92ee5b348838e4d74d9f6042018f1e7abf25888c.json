{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// import { contractAbi, contractAddress } from './constant';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(true);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState('');\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n\n//     const getContract = useCallback(async () => {\n//         if (!provider) return null;\n//         const signer = provider.getSigner();\n//         return new ethers.Contract(contractAddress, contractAbi, signer);\n//     }, [provider]);\n\n//     const fetchInitialData = useCallback(async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const [candidatesList, time, status] = await Promise.all([\n//                 contract.getAllVotesOfCandidates(),\n//                 contract.getRemainingTime(),\n//                 contract.getVotingStatus()\n//             ]);\n\n//             if (Array.isArray(candidatesList)) {\n//                 const formattedCandidates = candidatesList.map((candidate, index) => ({\n//                     index,\n//                     name: candidate.name,\n//                     voteCount: candidate.voteCount.toNumber(),\n//                     party: candidate.party,\n//                     area: candidate.area\n//                 }));\n//                 setCandidates(formattedCandidates);\n//             }\n\n//             setRemainingTime(parseInt(time.toString(), 10));\n//             setVotingStatus(status);\n//         } catch (error) {\n//             console.error('Error fetching initial data:', error);\n//         }\n//     }, [getContract]);\n\n//     useEffect(() => {\n//         if (provider) {\n//             fetchInitialData();\n//         }\n//     }, [provider, fetchInitialData]);\n\n//     useEffect(() => {\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//             }\n//         };\n//     }, []);\n\nconst fetchCitizenData = async aadhar => {\n  if (aadhar === \"\") {\n    setError(\"Aadhaar Number is required.\");\n    return;\n  }\n  try {\n    const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n    setCitizenData(response.data);\n    setError(\"\");\n  } catch (error) {\n    console.error('Error fetching citizen data:', error);\n    setError(\"User not found or server error.\");\n    setCitizenData(null);\n  }\n};\n\n//     const vote = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.vote(number);\n//             await tx.wait();\n//             await checkVotingEligibility();\n//             await fetchInitialData();\n//         } catch (error) {\n//             console.error(\"Error voting:\", error);\n//         }\n//     };\n\n//     const checkVotingEligibility = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const voteStatus = await contract.voters(account);\n//             setCanVote(voteStatus);\n//         } catch (error) {\n//             console.error(\"Error checking eligibility:\", error);\n//         }\n//     };\n\n//     const handleAccountsChanged = (accounts) => {\n//         if (accounts.length > 0 && account !== accounts[0]) {\n//             setAccount(accounts[0]);\n//             checkVotingEligibility();\n//         } else {\n//             setIsConnected(false);\n//             setAccount(null);\n//         }\n//     };\n\n//     const connectToMetamask = async () => {\n//         if (!window.ethereum) {\n//             console.error(\"Metamask is not detected in the browser\");\n//             return;\n//         }\n\n//         try {\n//             const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//             await web3Provider.send(\"eth_requestAccounts\", []);\n//             const signer = web3Provider.getSigner();\n//             const address = await signer.getAddress();\n\n//             setProvider(web3Provider);\n//             setAccount(address);\n//             setIsConnected(true);\n\n//             console.log(\"Metamask Connected : \" + address);\n//         } catch (err) {\n//             console.error(\"Connection error:\", err);\n//         }\n//     };\n\n//     const addCandidate = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.addCandidate(\n//                 newCandidateName, \n//                 newCandidateParty, \n//                 newCandidateArea, \n//                 { gasLimit: 500000 }\n//             );\n//             await tx.wait();\n//             await fetchInitialData();\n//         } catch (err) {\n//             console.error(\"Error adding candidate:\", err.message);\n//         }\n//     };\n\n//     const getResult = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return { name: '', voteCount: 0 };\n\n//             const result = await contract.getResults();\n\n//             if (!Array.isArray(result) || result.length < 2) {\n//                 return { name: '', voteCount: 0 };\n//             }\n\n//             const [winningCandidate, winningVoteCount] = result;\n//             return {\n//                 name: winningCandidate || '',\n//                 voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//             };\n//         } catch (error) {\n//             console.error('Error getting results:', error);\n//             return { name: '', voteCount: 0 };\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             {votingStatus ? (\n//                 isConnected ? (\n//                     <Connected\n//                         account={account}\n//                         candidates={candidates}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData}\n//                         remainingTime={remainingTime}\n//                         number={number}\n//                         handleNumberChange={(e) => setNumber(e.target.value)}\n//                         voteFunction={vote}\n//                         showButton={canVote}\n//                         addCandidate={addCandidate}\n//                         handleCandidateNameChange={(e) => setNewCandidateName(e.target.value)}\n//                         newCandidateName={newCandidateName}\n//                         newCandidateParty={newCandidateParty}\n//                         setNewCandidateParty={setNewCandidateParty}\n//                         newCandidateArea={newCandidateArea}\n//                         setNewCandidateArea={setNewCandidateArea}\n//                         onWalletAddressChange={() => {\n//                             setIsConnected(false);\n//                             setAccount(null);\n//                         }}\n//                     />\n//                 ) : (\n//                     <Login\n//                         connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                         setError={setError} \n//                     />\n//                 )\n//             ) : (\n//                 <Finished getResult={getResult} />\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Voting;\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport { contractAbi, contractAddress } from './constant';\nimport Login from './Login';\nimport Connected from './Connected';\nimport Finished from './Finished';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Voting() {\n  _s();\n  const [state, setState] = useState({\n    provider: null,\n    account: null,\n    contract: null,\n    isConnected: false,\n    isLoading: true,\n    votingStatus: false,\n    remainingTime: '',\n    candidates: [],\n    number: '',\n    canVote: true,\n    error: \"\",\n    citizenData: null\n  });\n\n  // Initialize contract once\n  const initializeContract = useCallback(async () => {\n    if (!window.ethereum) {\n      console.error(\"Metamask not detected\");\n      return null;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n      const address = await signer.getAddress();\n      setState(prev => ({\n        ...prev,\n        provider,\n        contract,\n        account: address,\n        isConnected: true\n      }));\n      return contract;\n    } catch (error) {\n      console.error(\"Failed to initialize contract:\", error);\n      return null;\n    }\n  }, []);\n\n  // Fetch blockchain data\n  const fetchBlockchainData = useCallback(async contract => {\n    if (!contract) return;\n    try {\n      setState(prev => ({\n        ...prev,\n        isLoading: true\n      }));\n      const [candidatesList, time, status, voteStatus] = await Promise.all([contract.getAllVotesOfCandidates(), contract.getRemainingTime(), contract.getVotingStatus(), contract.voters(state.account)]);\n      const formattedCandidates = candidatesList.map((candidate, index) => ({\n        index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber(),\n        party: candidate.party,\n        area: candidate.area\n      }));\n      setState(prev => ({\n        ...prev,\n        candidates: formattedCandidates,\n        remainingTime: parseInt(time.toString(), 10),\n        votingStatus: status,\n        canVote: voteStatus,\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error(\"Error fetching blockchain data:\", error);\n      setState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    }\n  }, [state.account]);\n\n  // Initialize on mount\n  useEffect(() => {\n    const init = async () => {\n      const contract = await initializeContract();\n      if (contract) {\n        await fetchBlockchainData(contract);\n      }\n    };\n    init();\n  }, [initializeContract]);\n\n  // Handle MetaMask connection\n  const connectToMetamask = async () => {\n    const contract = await initializeContract();\n    if (contract) {\n      await fetchBlockchainData(contract);\n    }\n  };\n\n  // Handle voting\n  const vote = async () => {\n    if (!state.contract || !state.number) return;\n    try {\n      const tx = await state.contract.vote(state.number);\n      await tx.wait();\n      await fetchBlockchainData(state.contract);\n    } catch (error) {\n      console.error(\"Error voting:\", error);\n    }\n  };\n\n  // ... rest of your functions ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: state.votingStatus ? state.isConnected ? /*#__PURE__*/_jsxDEV(Connected, {\n      account: state.account,\n      candidates: state.candidates,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: state.citizenData,\n      remainingTime: state.remainingTime,\n      number: state.number,\n      handleNumberChange: e => setState(prev => ({\n        ...prev,\n        number: e.target.value\n      })),\n      voteFunction: vote,\n      showButton: state.canVote,\n      onWalletAddressChange: () => setState(prev => ({\n        ...prev,\n        isConnected: false,\n        account: null\n      })),\n      isLoading: state.isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: state.citizenData,\n      error: state.error,\n      setError: error => setState(prev => ({\n        ...prev,\n        error\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Finished, {\n      getResult: getResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 9\n  }, this);\n}\n_s(Voting, \"UyyurfsK9m3c4GEutdAyU0QF2WU=\");\n_c = Voting;\nexport default Voting;\nvar _c;\n$RefreshReg$(_c, \"Voting\");","map":{"version":3,"names":["fetchCitizenData","aadhar","setError","response","axios","get","setCitizenData","data","error","console","React","useState","useEffect","useCallback","ethers","contractAbi","contractAddress","Login","Connected","Finished","jsxDEV","_jsxDEV","Voting","_s","state","setState","provider","account","contract","isConnected","isLoading","votingStatus","remainingTime","candidates","number","canVote","citizenData","initializeContract","window","ethereum","providers","Web3Provider","send","signer","getSigner","Contract","address","getAddress","prev","fetchBlockchainData","candidatesList","time","status","voteStatus","Promise","all","getAllVotesOfCandidates","getRemainingTime","getVotingStatus","voters","formattedCandidates","map","candidate","index","name","voteCount","toNumber","party","area","parseInt","toString","init","connectToMetamask","vote","tx","wait","className","children","handleNumberChange","e","target","value","voteFunction","showButton","onWalletAddressChange","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","getResult","_c","$RefreshReg$"],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js"],"sourcesContent":["\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// import { contractAbi, contractAddress } from './constant';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(true);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState('');\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n\n//     const getContract = useCallback(async () => {\n//         if (!provider) return null;\n//         const signer = provider.getSigner();\n//         return new ethers.Contract(contractAddress, contractAbi, signer);\n//     }, [provider]);\n\n//     const fetchInitialData = useCallback(async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const [candidatesList, time, status] = await Promise.all([\n//                 contract.getAllVotesOfCandidates(),\n//                 contract.getRemainingTime(),\n//                 contract.getVotingStatus()\n//             ]);\n\n//             if (Array.isArray(candidatesList)) {\n//                 const formattedCandidates = candidatesList.map((candidate, index) => ({\n//                     index,\n//                     name: candidate.name,\n//                     voteCount: candidate.voteCount.toNumber(),\n//                     party: candidate.party,\n//                     area: candidate.area\n//                 }));\n//                 setCandidates(formattedCandidates);\n//             }\n\n//             setRemainingTime(parseInt(time.toString(), 10));\n//             setVotingStatus(status);\n//         } catch (error) {\n//             console.error('Error fetching initial data:', error);\n//         }\n//     }, [getContract]);\n\n//     useEffect(() => {\n//         if (provider) {\n//             fetchInitialData();\n//         }\n//     }, [provider, fetchInitialData]);\n\n//     useEffect(() => {\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//             }\n//         };\n//     }, []);\n\n    const fetchCitizenData = async (aadhar) => {\n        if (aadhar === \"\") {\n            setError(\"Aadhaar Number is required.\");\n            return;\n        }\n\n        try {\n            const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n            setCitizenData(response.data);\n            setError(\"\");\n        } catch (error) {\n            console.error('Error fetching citizen data:', error);\n            setError(\"User not found or server error.\");\n            setCitizenData(null);\n        }\n    };\n\n//     const vote = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.vote(number);\n//             await tx.wait();\n//             await checkVotingEligibility();\n//             await fetchInitialData();\n//         } catch (error) {\n//             console.error(\"Error voting:\", error);\n//         }\n//     };\n\n//     const checkVotingEligibility = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const voteStatus = await contract.voters(account);\n//             setCanVote(voteStatus);\n//         } catch (error) {\n//             console.error(\"Error checking eligibility:\", error);\n//         }\n//     };\n\n//     const handleAccountsChanged = (accounts) => {\n//         if (accounts.length > 0 && account !== accounts[0]) {\n//             setAccount(accounts[0]);\n//             checkVotingEligibility();\n//         } else {\n//             setIsConnected(false);\n//             setAccount(null);\n//         }\n//     };\n\n//     const connectToMetamask = async () => {\n//         if (!window.ethereum) {\n//             console.error(\"Metamask is not detected in the browser\");\n//             return;\n//         }\n\n//         try {\n//             const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//             await web3Provider.send(\"eth_requestAccounts\", []);\n//             const signer = web3Provider.getSigner();\n//             const address = await signer.getAddress();\n\n//             setProvider(web3Provider);\n//             setAccount(address);\n//             setIsConnected(true);\n            \n//             console.log(\"Metamask Connected : \" + address);\n//         } catch (err) {\n//             console.error(\"Connection error:\", err);\n//         }\n//     };\n\n//     const addCandidate = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.addCandidate(\n//                 newCandidateName, \n//                 newCandidateParty, \n//                 newCandidateArea, \n//                 { gasLimit: 500000 }\n//             );\n//             await tx.wait();\n//             await fetchInitialData();\n//         } catch (err) {\n//             console.error(\"Error adding candidate:\", err.message);\n//         }\n//     };\n\n//     const getResult = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return { name: '', voteCount: 0 };\n\n//             const result = await contract.getResults();\n            \n//             if (!Array.isArray(result) || result.length < 2) {\n//                 return { name: '', voteCount: 0 };\n//             }\n\n//             const [winningCandidate, winningVoteCount] = result;\n//             return {\n//                 name: winningCandidate || '',\n//                 voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//             };\n//         } catch (error) {\n//             console.error('Error getting results:', error);\n//             return { name: '', voteCount: 0 };\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             {votingStatus ? (\n//                 isConnected ? (\n//                     <Connected\n//                         account={account}\n//                         candidates={candidates}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData}\n//                         remainingTime={remainingTime}\n//                         number={number}\n//                         handleNumberChange={(e) => setNumber(e.target.value)}\n//                         voteFunction={vote}\n//                         showButton={canVote}\n//                         addCandidate={addCandidate}\n//                         handleCandidateNameChange={(e) => setNewCandidateName(e.target.value)}\n//                         newCandidateName={newCandidateName}\n//                         newCandidateParty={newCandidateParty}\n//                         setNewCandidateParty={setNewCandidateParty}\n//                         newCandidateArea={newCandidateArea}\n//                         setNewCandidateArea={setNewCandidateArea}\n//                         onWalletAddressChange={() => {\n//                             setIsConnected(false);\n//                             setAccount(null);\n//                         }}\n//                     />\n//                 ) : (\n//                     <Login\n//                         connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                         setError={setError} \n//                     />\n//                 )\n//             ) : (\n//                 <Finished getResult={getResult} />\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Voting;\n\n\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport { contractAbi, contractAddress } from './constant';\nimport Login from './Login';\nimport Connected from './Connected';\nimport Finished from './Finished';\n\nfunction Voting() {\n    const [state, setState] = useState({\n        provider: null,\n        account: null,\n        contract: null,\n        isConnected: false,\n        isLoading: true,\n        votingStatus: false,\n        remainingTime: '',\n        candidates: [],\n        number: '',\n        canVote: true,\n        error: \"\",\n        citizenData: null\n    });\n\n    // Initialize contract once\n    const initializeContract = useCallback(async () => {\n        if (!window.ethereum) {\n            console.error(\"Metamask not detected\");\n            return null;\n        }\n\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            await provider.send(\"eth_requestAccounts\", []);\n            const signer = provider.getSigner();\n            const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n            const address = await signer.getAddress();\n\n            setState(prev => ({\n                ...prev,\n                provider,\n                contract,\n                account: address,\n                isConnected: true\n            }));\n\n            return contract;\n        } catch (error) {\n            console.error(\"Failed to initialize contract:\", error);\n            return null;\n        }\n    }, []);\n\n    // Fetch blockchain data\n    const fetchBlockchainData = useCallback(async (contract) => {\n        if (!contract) return;\n\n        try {\n            setState(prev => ({ ...prev, isLoading: true }));\n\n            const [candidatesList, time, status, voteStatus] = await Promise.all([\n                contract.getAllVotesOfCandidates(),\n                contract.getRemainingTime(),\n                contract.getVotingStatus(),\n                contract.voters(state.account)\n            ]);\n\n            const formattedCandidates = candidatesList.map((candidate, index) => ({\n                index,\n                name: candidate.name,\n                voteCount: candidate.voteCount.toNumber(),\n                party: candidate.party,\n                area: candidate.area\n            }));\n\n            setState(prev => ({\n                ...prev,\n                candidates: formattedCandidates,\n                remainingTime: parseInt(time.toString(), 10),\n                votingStatus: status,\n                canVote: voteStatus,\n                isLoading: false\n            }));\n        } catch (error) {\n            console.error(\"Error fetching blockchain data:\", error);\n            setState(prev => ({ ...prev, isLoading: false }));\n        }\n    }, [state.account]);\n\n    // Initialize on mount\n    useEffect(() => {\n        const init = async () => {\n            const contract = await initializeContract();\n            if (contract) {\n                await fetchBlockchainData(contract);\n            }\n        };\n\n        init();\n    }, [initializeContract]);\n\n    // Handle MetaMask connection\n    const connectToMetamask = async () => {\n        const contract = await initializeContract();\n        if (contract) {\n            await fetchBlockchainData(contract);\n        }\n    };\n\n    // Handle voting\n    const vote = async () => {\n        if (!state.contract || !state.number) return;\n\n        try {\n            const tx = await state.contract.vote(state.number);\n            await tx.wait();\n            await fetchBlockchainData(state.contract);\n        } catch (error) {\n            console.error(\"Error voting:\", error);\n        }\n    };\n\n    // ... rest of your functions ...\n\n    return (\n        <div className=\"App\">\n            {state.votingStatus ? (\n                state.isConnected ? (\n                    <Connected\n                        account={state.account}\n                        candidates={state.candidates}\n                        fetchCitizenData={fetchCitizenData}\n                        citizenData={state.citizenData}\n                        remainingTime={state.remainingTime}\n                        number={state.number}\n                        handleNumberChange={(e) => setState(prev => ({ ...prev, number: e.target.value }))}\n                        voteFunction={vote}\n                        showButton={state.canVote}\n                        onWalletAddressChange={() => setState(prev => ({ ...prev, isConnected: false, account: null }))}\n                        isLoading={state.isLoading}\n                    />\n                ) : (\n                    <Login\n                        connectWallet={connectToMetamask}\n                        fetchCitizenData={fetchCitizenData}\n                        citizenData={state.citizenData}\n                        error={state.error}\n                        setError={(error) => setState(prev => ({ ...prev, error }))}\n                    />\n                )\n            ) : (\n                <Finished getResult={getResult} />\n            )}\n        </div>\n    );\n}\n\nexport default Voting;"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEI,MAAMA,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EACvC,IAAIA,MAAM,KAAK,EAAE,EAAE;IACfC,QAAQ,CAAC,6BAA6B,CAAC;IACvC;EACJ;EAEA,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,+BAA+BJ,MAAM,EAAE,CAAC;IACzEK,cAAc,CAACH,QAAQ,CAACI,IAAI,CAAC;IAC7BL,QAAQ,CAAC,EAAE,CAAC;EAChB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpDN,QAAQ,CAAC,iCAAiC,CAAC;IAC3CI,cAAc,CAAC,IAAI,CAAC;EACxB;AACJ,CAAC;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}