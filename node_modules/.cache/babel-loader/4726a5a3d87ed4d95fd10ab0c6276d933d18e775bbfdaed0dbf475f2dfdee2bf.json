{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ethers } from 'ethers';\nimport { contractAbi, contractAddress } from './constant';\n// import Login from './Components/Login.jsx';\nimport Login from './Login';\nimport Finished from './Finished';\nimport Connected from './Connected';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Voting() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setRemainingTime] = useState('');\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState('');\n  const [canVote, setCanVote] = useState(true);\n  const [newCandidateName, setNewCandidateName] = useState('');\n  const [newCandidateParty, setNewCandidateParty] = useState(''); // New state for candidate party\n  const [newCandidateArea, setNewCandidateArea] = useState('');\n  const [error, setError] = useState(\"\");\n  const [citizenData, setCitizenData] = useState(null);\n  useEffect(() => {\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  }, []);\n\n  // Function to fetch citizen data\n  const fetchCitizenData = async aadhar => {\n    if (aadhar === \"\") {\n      setError(\"Aadhaar Number is required.\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n      setCitizenData(response.data); // Set the retrieved citizen data\n      setError(\"\"); // Clear error message\n    } catch (error) {\n      console.error('Error fetching citizen data:', error);\n      setError(\"User not found or server error.\");\n      setCitizenData(null); // Clear citizen data if user not found\n    }\n  };\n  async function vote() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const tx = await contractInstance.vote(number);\n    await tx.wait();\n    checkVotingEligibility();\n  }\n  async function checkVotingEligibility() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const voteStatus = await contractInstance.voters(await signer.getAddress());\n    setCanVote(voteStatus);\n  }\n  async function getCandidates() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const candidatesList = await contractInstance.getAllVotesOfCandidates();\n    const formattedCandidates = candidatesList.map((candidate, index) => ({\n      index,\n      name: candidate.name,\n      voteCount: candidate.voteCount.toNumber(),\n      party: candidate.party,\n      // Assuming party is included in the candidate object\n      area: candidate.area // Assuming area is included in the candidate object\n    }));\n    setCandidates(formattedCandidates);\n  }\n  async function getCurrentStatus() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const status = await contractInstance.getVotingStatus();\n    setVotingStatus(status);\n  }\n  async function getRemainingTime() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const time = await contractInstance.getRemainingTime();\n    setRemainingTime(parseInt(time.toString(), 10));\n  }\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      checkVotingEligibility();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        console.log(\"Metamask Connected : \" + address);\n        setIsConnected(true);\n        checkVotingEligibility();\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n  function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n  function handleCandidateNameChange(e) {\n    setNewCandidateName(e.target.value);\n  }\n  async function addCandidate() {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const tx = await contractInstance.addCandidate(newCandidateName, newCandidateParty, newCandidateArea, {\n        gasLimit: 500000\n      });\n      await tx.wait();\n      getCandidates(); // Refresh the list of candidates\n    } catch (err) {\n      console.error(\"Error adding candidate:\", err.message);\n    }\n  }\n  async function getResult() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const [winningCandidate, winningVoteCount] = await contractInstance.getResults();\n    return {\n      name: winningCandidate,\n      voteCount: winningVoteCount.toNumber()\n    };\n  }\n  function handleWalletAddressChange() {\n    setIsConnected(false); // Log the user out by setting isConnected to false\n    setAccount(null); // Clear the account info\n  }\n\n  // return (\n  //   <div className=\"App\">\n  //     {votingStatus ? (\n  //       isConnected ? (\n  //         <Connected\n  //           account={account}\n  //           candidates={candidates}\n  //           fetchCitizenData={fetchCitizenData}\n  //           citizenData={citizenData}\n  //           remainingTime={remainingTime}\n  //           number={number}\n  //           handleNumberChange={handleNumberChange}\n  //           voteFunction={vote}\n  //           showButton={canVote}\n  //           addCandidate={addCandidate}\n  //           handleCandidateNameChange={handleCandidateNameChange}\n  //           newCandidateName={newCandidateName}\n  //           newCandidateParty={newCandidateParty}\n  //           setNewCandidateParty={setNewCandidateParty}\n  //           newCandidateArea={newCandidateArea}\n  //           setNewCandidateArea={setNewCandidateArea}\n  //           onWalletAddressChange={handleWalletAddressChange} // Pass the new function here\n  //         />\n  //       ) : (\n  //         <Login connectWallet={connectToMetamask}\n  //                     fetchCitizenData={fetchCitizenData}\n  //                     citizenData={citizenData} \n  //                     error={error} \n  //               setError={setError} \n\n  //                     />\n  //       )\n  //     ) : (\n  //       <Finished getResult={getResult} />\n  //     )}\n  //   </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: votingStatus ? /*#__PURE__*/_jsxDEV(Finished, {\n      getResult: getResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }, this) : isConnected ? /*#__PURE__*/_jsxDEV(Connected, {\n      account: account,\n      candidates: candidates,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: citizenData,\n      remainingTime: remainingTime,\n      number: number,\n      handleNumberChange: handleNumberChange,\n      voteFunction: vote,\n      showButton: canVote,\n      addCandidate: addCandidate,\n      handleCandidateNameChange: handleCandidateNameChange,\n      newCandidateName: newCandidateName,\n      newCandidateParty: newCandidateParty,\n      setNewCandidateParty: setNewCandidateParty,\n      newCandidateArea: newCandidateArea,\n      setNewCandidateArea: setNewCandidateArea,\n      onWalletAddressChange: handleWalletAddressChange // Pass the new function here\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: citizenData,\n      error: error,\n      setError: setError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 7\n  }, this);\n}\n_s(Voting, \"C0Ru/bJ/0BqjYL3EfXN9AdHnHD0=\");\n_c = Voting;\nexport default Voting;\nvar _c;\n$RefreshReg$(_c, \"Voting\");","map":{"version":3,"names":["React","useState","useEffect","axios","ethers","contractAbi","contractAddress","Login","Finished","Connected","jsxDEV","_jsxDEV","Voting","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","remainingTime","setRemainingTime","candidates","setCandidates","number","setNumber","canVote","setCanVote","newCandidateName","setNewCandidateName","newCandidateParty","setNewCandidateParty","newCandidateArea","setNewCandidateArea","error","setError","citizenData","setCitizenData","getCandidates","getRemainingTime","getCurrentStatus","window","ethereum","on","handleAccountsChanged","removeListener","fetchCitizenData","aadhar","response","get","data","console","vote","providers","Web3Provider","send","signer","getSigner","contractInstance","Contract","tx","wait","checkVotingEligibility","voteStatus","voters","getAddress","candidatesList","getAllVotesOfCandidates","formattedCandidates","map","candidate","index","name","voteCount","toNumber","party","area","status","getVotingStatus","time","parseInt","toString","accounts","length","connectToMetamask","address","log","err","handleNumberChange","e","target","value","handleCandidateNameChange","addCandidate","gasLimit","message","getResult","winningCandidate","winningVoteCount","getResults","handleWalletAddressChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","voteFunction","showButton","onWalletAddressChange","connectWallet","_c","$RefreshReg$"],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ethers } from 'ethers';\nimport { contractAbi, contractAddress } from './constant';\n// import Login from './Components/Login.jsx';\nimport Login from './Login';\nimport Finished from './Finished';\nimport Connected from './Connected';\n\nfunction Voting() {\n    const [provider, setProvider] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);  \n    const [votingStatus, setVotingStatus] = useState(true);  \n    const [remainingTime, setRemainingTime] = useState('');\n    const [candidates, setCandidates] = useState([]);\n    const [number, setNumber] = useState('');\n    const [canVote, setCanVote] = useState(true);\n    const [newCandidateName, setNewCandidateName] = useState('');\n    const [newCandidateParty, setNewCandidateParty] = useState(''); // New state for candidate party\n    const [newCandidateArea, setNewCandidateArea] = useState('');\n    const [error, setError] = useState(\"\");\n    const [citizenData, setCitizenData] = useState(null);\n  \n    useEffect(() => {\n      getCandidates();\n      getRemainingTime();\n      getCurrentStatus();\n  \n      if (window.ethereum) {\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\n      }\n  \n      return () => {\n        if (window.ethereum) {\n          window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }, []);\n  \n  \n  // Function to fetch citizen data\n    const fetchCitizenData = async (aadhar) => {\n      if (aadhar === \"\") {\n        setError(\"Aadhaar Number is required.\");\n        return;\n      }\n  \n      try {\n        const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n        setCitizenData(response.data); // Set the retrieved citizen data\n        setError(\"\"); // Clear error message\n      } catch (error) {\n        console.error('Error fetching citizen data:', error);\n        setError(\"User not found or server error.\");\n        setCitizenData(null); // Clear citizen data if user not found\n      }\n    };\n  \n    async function vote() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n  \n      const tx = await contractInstance.vote(number);\n      await tx.wait();\n      checkVotingEligibility();\n    }\n  \n    async function checkVotingEligibility() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const voteStatus = await contractInstance.voters(await signer.getAddress());\n      setCanVote(voteStatus);\n    }\n  \n    async function getCandidates() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const candidatesList = await contractInstance.getAllVotesOfCandidates();\n      const formattedCandidates = candidatesList.map((candidate, index) => ({\n        index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber(),\n        party: candidate.party, // Assuming party is included in the candidate object\n        area: candidate.area // Assuming area is included in the candidate object\n      }));\n      setCandidates(formattedCandidates);\n    }\n  \n    async function getCurrentStatus() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const status = await contractInstance.getVotingStatus();\n      setVotingStatus(status);\n    }\n  \n    async function getRemainingTime() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const time = await contractInstance.getRemainingTime();\n      setRemainingTime(parseInt(time.toString(), 10));\n    }\n  \n    function handleAccountsChanged(accounts) {\n      if (accounts.length > 0 && account !== accounts[0]) {\n        setAccount(accounts[0]);\n        checkVotingEligibility();\n      } else {\n        setIsConnected(false);\n        setAccount(null);\n      }\n    }\n  \n    async function connectToMetamask() {\n      if (window.ethereum) {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          setProvider(provider);\n          await provider.send(\"eth_requestAccounts\", []);\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n          console.log(\"Metamask Connected : \" + address);\n          setIsConnected(true);\n          checkVotingEligibility();\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        console.error(\"Metamask is not detected in the browser\");\n      }\n    }\n  \n    function handleNumberChange(e) {\n      setNumber(e.target.value);\n    }\n  \n    function handleCandidateNameChange(e) {\n      setNewCandidateName(e.target.value);\n    }\n  \n    async function addCandidate() {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n  \n        const tx = await contractInstance.addCandidate(newCandidateName, newCandidateParty, newCandidateArea, { gasLimit: 500000 });\n        await tx.wait();\n        getCandidates(); // Refresh the list of candidates\n      } catch (err) {\n        console.error(\"Error adding candidate:\", err.message);\n      }\n    }\n  \n    async function getResult() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n  \n      const [winningCandidate, winningVoteCount] = await contractInstance.getResults();\n      return { name: winningCandidate, voteCount: winningVoteCount.toNumber() };\n    }\n  \n    function handleWalletAddressChange() {\n      setIsConnected(false); // Log the user out by setting isConnected to false\n      setAccount(null); // Clear the account info\n    }\n  \n  \n    // return (\n    //   <div className=\"App\">\n    //     {votingStatus ? (\n    //       isConnected ? (\n    //         <Connected\n    //           account={account}\n    //           candidates={candidates}\n    //           fetchCitizenData={fetchCitizenData}\n    //           citizenData={citizenData}\n    //           remainingTime={remainingTime}\n    //           number={number}\n    //           handleNumberChange={handleNumberChange}\n    //           voteFunction={vote}\n    //           showButton={canVote}\n    //           addCandidate={addCandidate}\n    //           handleCandidateNameChange={handleCandidateNameChange}\n    //           newCandidateName={newCandidateName}\n    //           newCandidateParty={newCandidateParty}\n    //           setNewCandidateParty={setNewCandidateParty}\n    //           newCandidateArea={newCandidateArea}\n    //           setNewCandidateArea={setNewCandidateArea}\n    //           onWalletAddressChange={handleWalletAddressChange} // Pass the new function here\n    //         />\n    //       ) : (\n    //         <Login connectWallet={connectToMetamask}\n    //                     fetchCitizenData={fetchCitizenData}\n    //                     citizenData={citizenData} \n    //                     error={error} \n    //               setError={setError} \n  \n    //                     />\n    //       )\n    //     ) : (\n    //       <Finished getResult={getResult} />\n    //     )}\n    //   </div>\n    // );\n    return (\n      <div className=\"App\">\n        {votingStatus ? (\n          <Finished getResult={getResult} />\n        ) : (\n          isConnected ? (\n            <Connected\n              account={account}\n              candidates={candidates}\n              fetchCitizenData={fetchCitizenData}\n              citizenData={citizenData}\n              remainingTime={remainingTime}\n              number={number}\n              handleNumberChange={handleNumberChange}\n              voteFunction={vote}\n              showButton={canVote}\n              addCandidate={addCandidate}\n              handleCandidateNameChange={handleCandidateNameChange}\n              newCandidateName={newCandidateName}\n              newCandidateParty={newCandidateParty}\n              setNewCandidateParty={setNewCandidateParty}\n              newCandidateArea={newCandidateArea}\n              setNewCandidateArea={setNewCandidateArea}\n              onWalletAddressChange={handleWalletAddressChange} // Pass the new function here\n            />\n          ) : (\n            <Login connectWallet={connectToMetamask}\n                        fetchCitizenData={fetchCitizenData}\n                        citizenData={citizenData} \n                        error={error} \n                  setError={setError} \n        \n                        />\n          )\n        )}\n      </div>\n    );\n}\n\nexport default Voting;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}