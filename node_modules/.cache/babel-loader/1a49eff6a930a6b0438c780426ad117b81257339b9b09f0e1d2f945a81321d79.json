{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport { contractAbi, contractAddress } from './constant';\nimport Login from './Login';\nimport Finished from './Finished';\nimport Connected from './Connected';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Voting() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setRemainingTime] = useState('');\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState('');\n  const [canVote, setCanVote] = useState(true);\n  const [newCandidateName, setNewCandidateName] = useState('');\n  const [newCandidateParty, setNewCandidateParty] = useState('');\n  const [newCandidateArea, setNewCandidateArea] = useState('');\n  const [error, setError] = useState(\"\");\n  const [citizenData, setCitizenData] = useState(null);\n  const getContract = useCallback(async () => {\n    if (!provider) return null;\n    const signer = provider.getSigner();\n    return new ethers.Contract(contractAddress, contractAbi, signer);\n  }, [provider]);\n\n  // const fetchInitialData = useCallback(async () => {\n  //     try {\n  //         const contract = await getContract();\n  //         if (!contract) return;\n\n  //         const [candidatesList, time, status] = await Promise.all([\n  //             contract.getAllVotesOfCandidates(),\n  //             contract.getRemainingTime(),\n  //             contract.getVotingStatus()\n  //         ]);\n\n  //         if (Array.isArray(candidatesList)) {\n  //             const formattedCandidates = candidatesList.map((candidate, index) => ({\n  //                 index,\n  //                 name: candidate.name,\n  //                 voteCount: candidate.voteCount.toNumber(),\n  //                 party: candidate.party,\n  //                 area: candidate.area\n  //             }));\n  //             setCandidates(formattedCandidates);\n  //         }\n\n  //         setRemainingTime(parseInt(time.toString(), 10));\n  //         setVotingStatus(status);\n  //         console.log(\"intial data is fetched\");\n  //     } catch (error) {\n  //         console.error('Error fetching initial data:', error);\n  //     }\n\n  // }, [getContract]);\n\n  useEffect(() => {\n    if (provider) {\n      fetchInitialData();\n    }\n  }, [provider, fetchInitialData]);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  }, []);\n  const fetchCitizenData = async aadhar => {\n    if (aadhar === \"\") {\n      setError(\"Aadhaar Number is required.\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n      setCitizenData(response.data);\n      setError(\"\");\n    } catch (error) {\n      console.error('Error fetching citizen data:', error);\n      setError(\"User not found or server error.\");\n      setCitizenData(null);\n    }\n  };\n  const vote = async () => {\n    try {\n      const contract = await getContract();\n      if (!contract) return;\n      const tx = await contract.vote(number);\n      await tx.wait();\n      await checkVotingEligibility();\n      await fetchInitialData();\n    } catch (error) {\n      console.error(\"Error voting:\", error);\n    }\n  };\n  const checkVotingEligibility = async () => {\n    try {\n      const contract = await getContract();\n      if (!contract) return;\n      const voteStatus = await contract.voters(account);\n      setCanVote(voteStatus);\n    } catch (error) {\n      console.error(\"Error checking eligibility:\", error);\n    }\n  };\n  const handleAccountsChanged = accounts => {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      checkVotingEligibility();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  };\n  const connectToMetamask = async () => {\n    if (!window.ethereum) {\n      console.error(\"Metamask is not detected in the browser\");\n      return;\n    }\n    try {\n      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n      await web3Provider.send(\"eth_requestAccounts\", []);\n      const signer = web3Provider.getSigner();\n      const address = await signer.getAddress();\n      setProvider(web3Provider);\n      setAccount(address);\n      setIsConnected(true);\n      console.log(\"Metamask Connected : \" + address);\n    } catch (err) {\n      console.error(\"Connection error:\", err);\n    }\n  };\n  const addCandidate = async () => {\n    try {\n      const contract = await getContract();\n      if (!contract) return;\n      const tx = await contract.addCandidate(newCandidateName, newCandidateParty, newCandidateArea, {\n        gasLimit: 500000\n      });\n      await tx.wait();\n      await fetchInitialData();\n    } catch (err) {\n      console.error(\"Error adding candidate:\", err.message);\n    }\n  };\n  const getResult = async () => {\n    try {\n      const contract = await getContract();\n      if (!contract) return {\n        name: '',\n        voteCount: 0\n      };\n      const result = await contract.getResults();\n      if (!Array.isArray(result) || result.length < 2) {\n        return {\n          name: '',\n          voteCount: 0\n        };\n      }\n      const [winningCandidate, winningVoteCount] = result;\n      return {\n        name: winningCandidate || '',\n        voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n      };\n    } catch (error) {\n      console.error('Error getting results:', error);\n      return {\n        name: '',\n        voteCount: 0\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: votingStatus ? isConnected ? /*#__PURE__*/_jsxDEV(Connected, {\n      account: account,\n      candidates: candidates,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: citizenData,\n      remainingTime: remainingTime,\n      number: number,\n      handleNumberChange: e => setNumber(e.target.value),\n      voteFunction: vote,\n      showButton: canVote,\n      addCandidate: addCandidate,\n      handleCandidateNameChange: e => setNewCandidateName(e.target.value),\n      newCandidateName: newCandidateName,\n      newCandidateParty: newCandidateParty,\n      setNewCandidateParty: setNewCandidateParty,\n      newCandidateArea: newCandidateArea,\n      setNewCandidateArea: setNewCandidateArea,\n      onWalletAddressChange: () => {\n        setIsConnected(false);\n        setAccount(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: citizenData,\n      error: error,\n      setError: setError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Finished, {\n      getResult: getResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 9\n  }, this);\n}\n_s(Voting, \"KQ6RZtIHoKY0MDl2K8ZPT93qXz8=\");\n_c = Voting;\nexport default Voting;\nvar _c;\n$RefreshReg$(_c, \"Voting\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ethers","axios","contractAbi","contractAddress","Login","Finished","Connected","jsxDEV","_jsxDEV","Voting","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","remainingTime","setRemainingTime","candidates","setCandidates","number","setNumber","canVote","setCanVote","newCandidateName","setNewCandidateName","newCandidateParty","setNewCandidateParty","newCandidateArea","setNewCandidateArea","error","setError","citizenData","setCitizenData","getContract","signer","getSigner","Contract","fetchInitialData","window","ethereum","on","handleAccountsChanged","removeListener","fetchCitizenData","aadhar","response","get","data","console","vote","contract","tx","wait","checkVotingEligibility","voteStatus","voters","accounts","length","connectToMetamask","web3Provider","providers","Web3Provider","send","address","getAddress","log","err","addCandidate","gasLimit","message","getResult","name","voteCount","result","getResults","Array","isArray","winningCandidate","winningVoteCount","toNumber","className","children","handleNumberChange","e","target","value","voteFunction","showButton","handleCandidateNameChange","onWalletAddressChange","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","_c","$RefreshReg$"],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js"],"sourcesContent":["\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport { contractAbi, contractAddress } from './constant';\nimport Login from './Login';\nimport Finished from './Finished';\nimport Connected from './Connected';\n\nfunction Voting() {\n    const [provider, setProvider] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);  \n    const [votingStatus, setVotingStatus] = useState(true);  \n    const [remainingTime, setRemainingTime] = useState('');\n    const [candidates, setCandidates] = useState([]);\n    const [number, setNumber] = useState('');\n    const [canVote, setCanVote] = useState(true);\n    const [newCandidateName, setNewCandidateName] = useState('');\n    const [newCandidateParty, setNewCandidateParty] = useState('');\n    const [newCandidateArea, setNewCandidateArea] = useState('');\n    const [error, setError] = useState(\"\");\n    const [citizenData, setCitizenData] = useState(null);\n\n    const getContract = useCallback(async () => {\n        if (!provider) return null;\n        const signer = provider.getSigner();\n        return new ethers.Contract(contractAddress, contractAbi, signer);\n    }, [provider]);\n\n    // const fetchInitialData = useCallback(async () => {\n    //     try {\n    //         const contract = await getContract();\n    //         if (!contract) return;\n\n    //         const [candidatesList, time, status] = await Promise.all([\n    //             contract.getAllVotesOfCandidates(),\n    //             contract.getRemainingTime(),\n    //             contract.getVotingStatus()\n    //         ]);\n\n    //         if (Array.isArray(candidatesList)) {\n    //             const formattedCandidates = candidatesList.map((candidate, index) => ({\n    //                 index,\n    //                 name: candidate.name,\n    //                 voteCount: candidate.voteCount.toNumber(),\n    //                 party: candidate.party,\n    //                 area: candidate.area\n    //             }));\n    //             setCandidates(formattedCandidates);\n    //         }\n\n    //         setRemainingTime(parseInt(time.toString(), 10));\n    //         setVotingStatus(status);\n    //         console.log(\"intial data is fetched\");\n    //     } catch (error) {\n    //         console.error('Error fetching initial data:', error);\n    //     }\n        \n    // }, [getContract]);\n\n    \n\n    useEffect(() => {\n        if (provider) {\n            fetchInitialData();\n        }\n    }, [provider, fetchInitialData]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\n        }\n\n        return () => {\n            if (window.ethereum) {\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n            }\n        };\n    }, []);\n\n    const fetchCitizenData = async (aadhar) => {\n        if (aadhar === \"\") {\n            setError(\"Aadhaar Number is required.\");\n            return;\n        }\n\n        try {\n            const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n            setCitizenData(response.data);\n            setError(\"\");\n        } catch (error) {\n            console.error('Error fetching citizen data:', error);\n            setError(\"User not found or server error.\");\n            setCitizenData(null);\n        }\n    };\n\n    const vote = async () => {\n        try {\n            const contract = await getContract();\n            if (!contract) return;\n\n            const tx = await contract.vote(number);\n            await tx.wait();\n            await checkVotingEligibility();\n            await fetchInitialData();\n        } catch (error) {\n            console.error(\"Error voting:\", error);\n        }\n    };\n\n    const checkVotingEligibility = async () => {\n        try {\n            const contract = await getContract();\n            if (!contract) return;\n\n            const voteStatus = await contract.voters(account);\n            setCanVote(voteStatus);\n        } catch (error) {\n            console.error(\"Error checking eligibility:\", error);\n        }\n    };\n\n    const handleAccountsChanged = (accounts) => {\n        if (accounts.length > 0 && account !== accounts[0]) {\n            setAccount(accounts[0]);\n            checkVotingEligibility();\n        } else {\n            setIsConnected(false);\n            setAccount(null);\n        }\n    };\n\n    const connectToMetamask = async () => {\n        if (!window.ethereum) {\n            console.error(\"Metamask is not detected in the browser\");\n            return;\n        }\n\n        try {\n            const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n            await web3Provider.send(\"eth_requestAccounts\", []);\n            const signer = web3Provider.getSigner();\n            const address = await signer.getAddress();\n\n            setProvider(web3Provider);\n            setAccount(address);\n            setIsConnected(true);\n            \n            console.log(\"Metamask Connected : \" + address);\n        } catch (err) {\n            console.error(\"Connection error:\", err);\n        }\n    };\n\n\n    \n\n    const addCandidate = async () => {\n        try {\n            const contract = await getContract();\n            if (!contract) return;\n\n            const tx = await contract.addCandidate(\n                newCandidateName, \n                newCandidateParty, \n                newCandidateArea, \n                { gasLimit: 500000 }\n            );\n            await tx.wait();\n            await fetchInitialData();\n        } catch (err) {\n            console.error(\"Error adding candidate:\", err.message);\n        }\n    };\n\n    const getResult = async () => {\n        try {\n            const contract = await getContract();\n            if (!contract) return { name: '', voteCount: 0 };\n\n            const result = await contract.getResults();\n            \n            if (!Array.isArray(result) || result.length < 2) {\n                return { name: '', voteCount: 0 };\n            }\n\n            const [winningCandidate, winningVoteCount] = result;\n            return {\n                name: winningCandidate || '',\n                voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n            };\n        } catch (error) {\n            console.error('Error getting results:', error);\n            return { name: '', voteCount: 0 };\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            {votingStatus ? (\n                isConnected ? (\n                    <Connected\n                        account={account}\n                        candidates={candidates}\n                        fetchCitizenData={fetchCitizenData}\n                        citizenData={citizenData}\n                        remainingTime={remainingTime}\n                        number={number}\n                        handleNumberChange={(e) => setNumber(e.target.value)}\n                        voteFunction={vote}\n                        showButton={canVote}\n                        addCandidate={addCandidate}\n                        handleCandidateNameChange={(e) => setNewCandidateName(e.target.value)}\n                        newCandidateName={newCandidateName}\n                        newCandidateParty={newCandidateParty}\n                        setNewCandidateParty={setNewCandidateParty}\n                        newCandidateArea={newCandidateArea}\n                        setNewCandidateArea={setNewCandidateArea}\n                        onWalletAddressChange={() => {\n                            setIsConnected(false);\n                            setAccount(null);\n                        }}\n                    />\n                ) : (\n                    <Login\n                        connectWallet={connectToMetamask}\n                        fetchCitizenData={fetchCitizenData}\n                        citizenData={citizenData} \n                        error={error} \n                        setError={setError} \n                    />\n                )\n            ) : (\n                <Finished getResult={getResult} />\n            )}\n        </div>\n    );\n}\n\nexport default Voting;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}