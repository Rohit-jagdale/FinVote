{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/Desktop/projects/FinVote/src/components/Connected.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = (props) => {\n\n//   useEffect(() => {\n//     const handleAccountsChanged = (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== props.account) {\n//         props.onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [props.account, props.onWalletAddressChange]);\n\n//   // Filter candidates that belong to the same area as the citizen\n//   const filteredCandidates = props.candidates.filter(candidate => candidate.area === props.citizenData.area);\n\n//  return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">Metamask Account: {props.account}</p>\n//       <p className=\"connected-account\">Remaining Time: {Math.floor(props.remainingTime / 60)} minutes</p>\n\n//       {props.showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={props.number}\n//             onChange={props.handleNumberChange}\n//             className=\"candidate-input\"\n//           />\n//           <button className=\"login-button\" onClick={props.voteFunction}>Vote</button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate, index) => (\n//                 <tr key={index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">No candidates available for your area</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\n// import React, { useEffect, useMemo } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = ({\n//   account,\n//   candidates,\n//   citizenData,\n//   remainingTime,\n//   number,\n//   handleNumberChange,\n//   voteFunction,\n//   showButton,\n//   onWalletAddressChange\n// }) => {\n//   useEffect(() => {\n//     const handleAccountsChanged = async (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== account) {\n//         onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [account, onWalletAddressChange]);\n\n//   // Memoize filtered candidates to prevent unnecessary recalculations\n//   const filteredCandidates = useMemo(() => {\n//     if (!citizenData?.area || !candidates) return [];\n//     return candidates.filter(candidate => candidate.area === citizenData.area);\n//   }, [candidates, citizenData?.area]);\n\n//   // Calculate remaining time in minutes and seconds\n//   const timeDisplay = useMemo(() => {\n//     const minutes = Math.floor(remainingTime / 60);\n//     const seconds = remainingTime % 60;\n//     return `${minutes} minutes ${seconds} seconds`;\n//   }, [remainingTime]);\n\n//   const handleVoteClick = async () => {\n//     if (!number) {\n//       alert(\"Please enter a candidate index\");\n//       return;\n//     }\n\n//     const selectedCandidate = filteredCandidates.find(c => c.index === parseInt(number));\n//     if (!selectedCandidate) {\n//       alert(\"Invalid candidate index. Please select from the available candidates.\");\n//       return;\n//     }\n\n//     try {\n//       await voteFunction();\n//     } catch (error) {\n//       console.error(\"Voting failed:\", error);\n//       alert(\"Failed to cast vote. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">\n//         Metamask Account: {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Not connected'}\n//       </p>\n//       <p className=\"connected-account\">Remaining Time: {timeDisplay}</p>\n\n//       {showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={number}\n//             onChange={handleNumberChange}\n//             className=\"candidate-input\"\n//             min=\"0\"\n//             max={filteredCandidates.length - 1}\n//           />\n//           <button \n//             className=\"login-button\" \n//             onClick={handleVoteClick}\n//             disabled={!number || number < 0 || number >= filteredCandidates.length}\n//           >\n//             Vote\n//           </button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate) => (\n//                 <tr key={candidate.index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">\n//                   {!citizenData?.area \n//                     ? \"Please verify your citizenship to see available candidates\" \n//                     : \"No candidates available for your area\"}\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\nimport React, { useEffect, useMemo } from \"react\";\nimport \"./connected.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Connected = ({\n  account,\n  candidates,\n  citizenData,\n  remainingTime,\n  number,\n  handleNumberChange,\n  voteFunction,\n  showButton,\n  onWalletAddressChange,\n  isLoading // Add this prop\n}) => {\n  _s();\n  useEffect(() => {\n    const handleAccountsChanged = accounts => {\n      if (accounts.length === 0 || accounts[0] !== account) {\n        onWalletAddressChange();\n      }\n    };\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  }, [account, onWalletAddressChange]);\n  const filteredCandidates = useMemo(() => {\n    if (!(citizenData !== null && citizenData !== void 0 && citizenData.area) || !candidates) return [];\n    return candidates.filter(candidate => candidate.area === citizenData.area);\n  }, [candidates, citizenData === null || citizenData === void 0 ? void 0 : citizenData.area]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connected-container\",\n      children: \"Loading blockchain data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"connected-header\",\n      children: \"You are Connected to Metamask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"connected-account\",\n      children: [\"Metamask Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"connected-account\",\n      children: [\"Remaining Time: \", Math.floor(remainingTime / 60), \" minutes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), showButton ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"connected-account\",\n      children: \"You have already voted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Enter Candidate Index\",\n        value: number,\n        onChange: handleNumberChange,\n        className: \"candidate-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login-button\",\n        onClick: voteFunction,\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(Connected, \"Ohr/N+RwPW4O/vGKBmKis+E+Qss=\");\n_c = Connected;\nexport default Connected;\nvar _c;\n$RefreshReg$(_c, \"Connected\");","map":{"version":3,"names":["React","useEffect","useMemo","jsxDEV","_jsxDEV","Connected","account","candidates","citizenData","remainingTime","number","handleNumberChange","voteFunction","showButton","onWalletAddressChange","isLoading","_s","handleAccountsChanged","accounts","length","window","ethereum","on","removeListener","filteredCandidates","area","filter","candidate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Math","floor","type","placeholder","value","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Connected.jsx"],"sourcesContent":["// import React, { useEffect } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = (props) => {\n\n\n\n//   useEffect(() => {\n//     const handleAccountsChanged = (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== props.account) {\n//         props.onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [props.account, props.onWalletAddressChange]);\n\n//   // Filter candidates that belong to the same area as the citizen\n//   const filteredCandidates = props.candidates.filter(candidate => candidate.area === props.citizenData.area);\n\n//  return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">Metamask Account: {props.account}</p>\n//       <p className=\"connected-account\">Remaining Time: {Math.floor(props.remainingTime / 60)} minutes</p>\n      \n//       {props.showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={props.number}\n//             onChange={props.handleNumberChange}\n//             className=\"candidate-input\"\n//           />\n//           <button className=\"login-button\" onClick={props.voteFunction}>Vote</button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate, index) => (\n//                 <tr key={index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">No candidates available for your area</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\n\n\n// import React, { useEffect, useMemo } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = ({\n//   account,\n//   candidates,\n//   citizenData,\n//   remainingTime,\n//   number,\n//   handleNumberChange,\n//   voteFunction,\n//   showButton,\n//   onWalletAddressChange\n// }) => {\n//   useEffect(() => {\n//     const handleAccountsChanged = async (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== account) {\n//         onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [account, onWalletAddressChange]);\n\n//   // Memoize filtered candidates to prevent unnecessary recalculations\n//   const filteredCandidates = useMemo(() => {\n//     if (!citizenData?.area || !candidates) return [];\n//     return candidates.filter(candidate => candidate.area === citizenData.area);\n//   }, [candidates, citizenData?.area]);\n\n//   // Calculate remaining time in minutes and seconds\n//   const timeDisplay = useMemo(() => {\n//     const minutes = Math.floor(remainingTime / 60);\n//     const seconds = remainingTime % 60;\n//     return `${minutes} minutes ${seconds} seconds`;\n//   }, [remainingTime]);\n\n//   const handleVoteClick = async () => {\n//     if (!number) {\n//       alert(\"Please enter a candidate index\");\n//       return;\n//     }\n    \n//     const selectedCandidate = filteredCandidates.find(c => c.index === parseInt(number));\n//     if (!selectedCandidate) {\n//       alert(\"Invalid candidate index. Please select from the available candidates.\");\n//       return;\n//     }\n\n//     try {\n//       await voteFunction();\n//     } catch (error) {\n//       console.error(\"Voting failed:\", error);\n//       alert(\"Failed to cast vote. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">\n//         Metamask Account: {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Not connected'}\n//       </p>\n//       <p className=\"connected-account\">Remaining Time: {timeDisplay}</p>\n      \n//       {showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={number}\n//             onChange={handleNumberChange}\n//             className=\"candidate-input\"\n//             min=\"0\"\n//             max={filteredCandidates.length - 1}\n//           />\n//           <button \n//             className=\"login-button\" \n//             onClick={handleVoteClick}\n//             disabled={!number || number < 0 || number >= filteredCandidates.length}\n//           >\n//             Vote\n//           </button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate) => (\n//                 <tr key={candidate.index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">\n//                   {!citizenData?.area \n//                     ? \"Please verify your citizenship to see available candidates\" \n//                     : \"No candidates available for your area\"}\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\n\nimport React, { useEffect, useMemo } from \"react\";\nimport \"./connected.css\";\n\nconst Connected = ({\n  account,\n  candidates,\n  citizenData,\n  remainingTime,\n  number,\n  handleNumberChange,\n  voteFunction,\n  showButton,\n  onWalletAddressChange,\n  isLoading // Add this prop\n}) => {\n  useEffect(() => {\n    const handleAccountsChanged = (accounts) => {\n      if (accounts.length === 0 || accounts[0] !== account) {\n        onWalletAddressChange();\n      }\n    };\n\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  }, [account, onWalletAddressChange]);\n\n  const filteredCandidates = useMemo(() => {\n    if (!citizenData?.area || !candidates) return [];\n    return candidates.filter(candidate => candidate.area === citizenData.area);\n  }, [candidates, citizenData?.area]);\n\n  if (isLoading) {\n    return <div className=\"connected-container\">Loading blockchain data...</div>;\n  }\n\n  return (\n    <div className=\"connected-container\">\n      <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n      <p className=\"connected-account\">Metamask Account: {account}</p>\n      <p className=\"connected-account\">Remaining Time: {Math.floor(remainingTime / 60)} minutes</p>\n\n      {showButton ? (\n        <p className=\"connected-account\">You have already voted</p>\n      ) : (\n        <div>\n          <input\n            type=\"number\"\n            placeholder=\"Enter Candidate Index\"\n            value={number}\n            onChange={handleNumberChange}\n            className=\"candidate-input\"\n          />\n          <button className=\"login-button\" onClick={voteFunction}>Vote</button>\n        </div>\n      )}\n\n      <div className=\"table-container\">\n        {/* ... rest of your table code ... */}\n      </div>\n    </div>\n  );\n};\n\nexport default Connected;"],"mappings":";;AAAA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACjD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAC;EACjBC,OAAO;EACPC,UAAU;EACVC,WAAW;EACXC,aAAa;EACbC,MAAM;EACNC,kBAAkB;EAClB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}