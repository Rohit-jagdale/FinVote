{"ast":null,"code":"// import React, { useEffect } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = (props) => {\n\n//   useEffect(() => {\n//     const handleAccountsChanged = (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== props.account) {\n//         props.onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [props.account, props.onWalletAddressChange]);\n\n//   // Filter candidates that belong to the same area as the citizen\n//   const filteredCandidates = props.candidates.filter(candidate => candidate.area === props.citizenData.area);\n\n//  return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">Metamask Account: {props.account}</p>\n//       <p className=\"connected-account\">Remaining Time: {Math.floor(props.remainingTime / 60)} minutes</p>\n\n//       {props.showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={props.number}\n//             onChange={props.handleNumberChange}\n//             className=\"candidate-input\"\n//           />\n//           <button className=\"login-button\" onClick={props.voteFunction}>Vote</button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate, index) => (\n//                 <tr key={index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">No candidates available for your area</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\n// import React, { useEffect, useMemo } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = ({\n//   account,\n//   candidates,\n//   citizenData,\n//   remainingTime,\n//   number,\n//   handleNumberChange,\n//   voteFunction,\n//   showButton,\n//   onWalletAddressChange\n// }) => {\n//   useEffect(() => {\n//     const handleAccountsChanged = async (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== account) {\n//         onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [account, onWalletAddressChange]);\n\n//   // Memoize filtered candidates to prevent unnecessary recalculations\n//   const filteredCandidates = useMemo(() => {\n//     if (!citizenData?.area || !candidates) return [];\n//     return candidates.filter(candidate => candidate.area === citizenData.area);\n//   }, [candidates, citizenData?.area]);\n\n//   // Calculate remaining time in minutes and seconds\n//   const timeDisplay = useMemo(() => {\n//     const minutes = Math.floor(remainingTime / 60);\n//     const seconds = remainingTime % 60;\n//     return `${minutes} minutes ${seconds} seconds`;\n//   }, [remainingTime]);\n\n//   const handleVoteClick = async () => {\n//     if (!number) {\n//       alert(\"Please enter a candidate index\");\n//       return;\n//     }\n\n//     const selectedCandidate = filteredCandidates.find(c => c.index === parseInt(number));\n//     if (!selectedCandidate) {\n//       alert(\"Invalid candidate index. Please select from the available candidates.\");\n//       return;\n//     }\n\n//     try {\n//       await voteFunction();\n//     } catch (error) {\n//       console.error(\"Voting failed:\", error);\n//       alert(\"Failed to cast vote. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">\n//         Metamask Account: {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Not connected'}\n//       </p>\n//       <p className=\"connected-account\">Remaining Time: {timeDisplay}</p>\n\n//       {showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={number}\n//             onChange={handleNumberChange}\n//             className=\"candidate-input\"\n//             min=\"0\"\n//             max={filteredCandidates.length - 1}\n//           />\n//           <button \n//             className=\"login-button\" \n//             onClick={handleVoteClick}\n//             disabled={!number || number < 0 || number >= filteredCandidates.length}\n//           >\n//             Vote\n//           </button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate) => (\n//                 <tr key={candidate.index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">\n//                   {!citizenData?.area \n//                     ? \"Please verify your citizenship to see available candidates\" \n//                     : \"No candidates available for your area\"}\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\n// import React, { useEffect, useMemo } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = ({\n//   account,\n//   candidates,\n//   citizenData,\n//   remainingTime,\n//   number,\n//   handleNumberChange,\n//   voteFunction,\n//   showButton,\n//   onWalletAddressChange,\n//   isLoading // Add this prop\n// }) => {\n//   useEffect(() => {\n//     const handleAccountsChanged = (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== account) {\n//         onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [account, onWalletAddressChange]);\n\n//   const filteredCandidates = useMemo(() => {\n//     if (!citizenData?.area || !candidates) return [];\n//     return candidates.filter(candidate => candidate.area === citizenData.area);\n//   }, [candidates, citizenData?.area]);\n\n//   if (isLoading) {\n//     return <div className=\"connected-container\">Loading blockchain data...</div>;\n//   }\n\n//   return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">Metamask Account: {account}</p>\n//       <p className=\"connected-account\">Remaining Time: {Math.floor(remainingTime / 60)} minutes</p>\n\n//       {showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={number}\n//             onChange={handleNumberChange}\n//             className=\"candidate-input\"\n//           />\n//           <button className=\"login-button\" onClick={voteFunction}>Vote</button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         {/* ... rest of your table code ... */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;","map":{"version":3,"names":[],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Connected.jsx"],"sourcesContent":["// import React, { useEffect } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = (props) => {\n\n\n\n//   useEffect(() => {\n//     const handleAccountsChanged = (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== props.account) {\n//         props.onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [props.account, props.onWalletAddressChange]);\n\n//   // Filter candidates that belong to the same area as the citizen\n//   const filteredCandidates = props.candidates.filter(candidate => candidate.area === props.citizenData.area);\n\n//  return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">Metamask Account: {props.account}</p>\n//       <p className=\"connected-account\">Remaining Time: {Math.floor(props.remainingTime / 60)} minutes</p>\n      \n//       {props.showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={props.number}\n//             onChange={props.handleNumberChange}\n//             className=\"candidate-input\"\n//           />\n//           <button className=\"login-button\" onClick={props.voteFunction}>Vote</button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate, index) => (\n//                 <tr key={index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">No candidates available for your area</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\n\n\n// import React, { useEffect, useMemo } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = ({\n//   account,\n//   candidates,\n//   citizenData,\n//   remainingTime,\n//   number,\n//   handleNumberChange,\n//   voteFunction,\n//   showButton,\n//   onWalletAddressChange\n// }) => {\n//   useEffect(() => {\n//     const handleAccountsChanged = async (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== account) {\n//         onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [account, onWalletAddressChange]);\n\n//   // Memoize filtered candidates to prevent unnecessary recalculations\n//   const filteredCandidates = useMemo(() => {\n//     if (!citizenData?.area || !candidates) return [];\n//     return candidates.filter(candidate => candidate.area === citizenData.area);\n//   }, [candidates, citizenData?.area]);\n\n//   // Calculate remaining time in minutes and seconds\n//   const timeDisplay = useMemo(() => {\n//     const minutes = Math.floor(remainingTime / 60);\n//     const seconds = remainingTime % 60;\n//     return `${minutes} minutes ${seconds} seconds`;\n//   }, [remainingTime]);\n\n//   const handleVoteClick = async () => {\n//     if (!number) {\n//       alert(\"Please enter a candidate index\");\n//       return;\n//     }\n    \n//     const selectedCandidate = filteredCandidates.find(c => c.index === parseInt(number));\n//     if (!selectedCandidate) {\n//       alert(\"Invalid candidate index. Please select from the available candidates.\");\n//       return;\n//     }\n\n//     try {\n//       await voteFunction();\n//     } catch (error) {\n//       console.error(\"Voting failed:\", error);\n//       alert(\"Failed to cast vote. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">\n//         Metamask Account: {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Not connected'}\n//       </p>\n//       <p className=\"connected-account\">Remaining Time: {timeDisplay}</p>\n      \n//       {showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={number}\n//             onChange={handleNumberChange}\n//             className=\"candidate-input\"\n//             min=\"0\"\n//             max={filteredCandidates.length - 1}\n//           />\n//           <button \n//             className=\"login-button\" \n//             onClick={handleVoteClick}\n//             disabled={!number || number < 0 || number >= filteredCandidates.length}\n//           >\n//             Vote\n//           </button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         <table className=\"candidates-table\">\n//           <thead>\n//             <tr>\n//               <th>Index</th>\n//               <th>Candidate Name</th>\n//               <th>Candidate Votes</th>\n//               <th>Party Name</th>\n//               <th>Area</th>\n//             </tr>\n//           </thead>\n//           <tbody className=\"scrollable-body\">\n//             {filteredCandidates.length > 0 ? (\n//               filteredCandidates.map((candidate) => (\n//                 <tr key={candidate.index}>\n//                   <td>{candidate.index}</td>\n//                   <td>{candidate.name}</td>\n//                   <td>{candidate.voteCount}</td>\n//                   <td>{candidate.party}</td>\n//                   <td>{candidate.area}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"5\">\n//                   {!citizenData?.area \n//                     ? \"Please verify your citizenship to see available candidates\" \n//                     : \"No candidates available for your area\"}\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;\n\n\n// import React, { useEffect, useMemo } from \"react\";\n// import \"./connected.css\";\n\n// const Connected = ({\n//   account,\n//   candidates,\n//   citizenData,\n//   remainingTime,\n//   number,\n//   handleNumberChange,\n//   voteFunction,\n//   showButton,\n//   onWalletAddressChange,\n//   isLoading // Add this prop\n// }) => {\n//   useEffect(() => {\n//     const handleAccountsChanged = (accounts) => {\n//       if (accounts.length === 0 || accounts[0] !== account) {\n//         onWalletAddressChange();\n//       }\n//     };\n\n//     if (window.ethereum) {\n//       window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n//     }\n\n//     return () => {\n//       if (window.ethereum) {\n//         window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n//       }\n//     };\n//   }, [account, onWalletAddressChange]);\n\n//   const filteredCandidates = useMemo(() => {\n//     if (!citizenData?.area || !candidates) return [];\n//     return candidates.filter(candidate => candidate.area === citizenData.area);\n//   }, [candidates, citizenData?.area]);\n\n//   if (isLoading) {\n//     return <div className=\"connected-container\">Loading blockchain data...</div>;\n//   }\n\n//   return (\n//     <div className=\"connected-container\">\n//       <h1 className=\"connected-header\">You are Connected to Metamask</h1>\n//       <p className=\"connected-account\">Metamask Account: {account}</p>\n//       <p className=\"connected-account\">Remaining Time: {Math.floor(remainingTime / 60)} minutes</p>\n\n//       {showButton ? (\n//         <p className=\"connected-account\">You have already voted</p>\n//       ) : (\n//         <div>\n//           <input\n//             type=\"number\"\n//             placeholder=\"Enter Candidate Index\"\n//             value={number}\n//             onChange={handleNumberChange}\n//             className=\"candidate-input\"\n//           />\n//           <button className=\"login-button\" onClick={voteFunction}>Vote</button>\n//         </div>\n//       )}\n\n//       <div className=\"table-container\">\n//         {/* ... rest of your table code ... */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Connected;"],"mappings":"AAAA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}