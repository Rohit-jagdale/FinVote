{"ast":null,"code":"import { browserSupportsWebAuthn } from './browserSupportsWebAuthn.js';\n/**\n * Determine if the browser supports conditional UI, so that WebAuthn credentials can\n * be shown to the user in the browser's typical password autofill popup.\n */\nexport function browserSupportsWebAuthnAutofill() {\n  if (!browserSupportsWebAuthn()) {\n    return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise(resolve => resolve(false)));\n  }\n  /**\n   * I don't like the `as unknown` here but there's a `declare var PublicKeyCredential` in\n   * TS' DOM lib that's making it difficult for me to just go `as PublicKeyCredentialFuture` as I\n   * want. I think I'm fine with this for now since it's _supposed_ to be temporary, until TS types\n   * have a chance to catch up.\n   */\n  const globalPublicKeyCredential = globalThis.PublicKeyCredential;\n  if (globalPublicKeyCredential?.isConditionalMediationAvailable === undefined) {\n    return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise(resolve => resolve(false)));\n  }\n  return _browserSupportsWebAuthnAutofillInternals.stubThis(globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n// Make it possible to stub the return value during testing\nexport const _browserSupportsWebAuthnAutofillInternals = {\n  stubThis: value => value\n};","map":{"version":3,"names":["browserSupportsWebAuthn","browserSupportsWebAuthnAutofill","_browserSupportsWebAuthnAutofillInternals","stubThis","Promise","resolve","globalPublicKeyCredential","globalThis","PublicKeyCredential","isConditionalMediationAvailable","undefined","value"],"sources":["/Users/rohit/Desktop/projects/FinVote/node_modules/@simplewebauthn/browser/esm/helpers/browserSupportsWebAuthnAutofill.js"],"sourcesContent":["import { browserSupportsWebAuthn } from './browserSupportsWebAuthn.js';\n/**\n * Determine if the browser supports conditional UI, so that WebAuthn credentials can\n * be shown to the user in the browser's typical password autofill popup.\n */\nexport function browserSupportsWebAuthnAutofill() {\n    if (!browserSupportsWebAuthn()) {\n        return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise((resolve) => resolve(false)));\n    }\n    /**\n     * I don't like the `as unknown` here but there's a `declare var PublicKeyCredential` in\n     * TS' DOM lib that's making it difficult for me to just go `as PublicKeyCredentialFuture` as I\n     * want. I think I'm fine with this for now since it's _supposed_ to be temporary, until TS types\n     * have a chance to catch up.\n     */\n    const globalPublicKeyCredential = globalThis\n        .PublicKeyCredential;\n    if (globalPublicKeyCredential?.isConditionalMediationAvailable === undefined) {\n        return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise((resolve) => resolve(false)));\n    }\n    return _browserSupportsWebAuthnAutofillInternals.stubThis(globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n// Make it possible to stub the return value during testing\nexport const _browserSupportsWebAuthnAutofillInternals = {\n    stubThis: (value) => value,\n};\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,8BAA8B;AACtE;AACA;AACA;AACA;AACA,OAAO,SAASC,+BAA+BA,CAAA,EAAG;EAC9C,IAAI,CAACD,uBAAuB,CAAC,CAAC,EAAE;IAC5B,OAAOE,yCAAyC,CAACC,QAAQ,CAAC,IAAIC,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;EACvG;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,yBAAyB,GAAGC,UAAU,CACvCC,mBAAmB;EACxB,IAAIF,yBAAyB,EAAEG,+BAA+B,KAAKC,SAAS,EAAE;IAC1E,OAAOR,yCAAyC,CAACC,QAAQ,CAAC,IAAIC,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;EACvG;EACA,OAAOH,yCAAyC,CAACC,QAAQ,CAACG,yBAAyB,CAACG,+BAA+B,CAAC,CAAC,CAAC;AAC1H;AACA;AACA,OAAO,MAAMP,yCAAyC,GAAG;EACrDC,QAAQ,EAAGQ,KAAK,IAAKA;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}