{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// import { contractAbi, contractAddress } from './constant';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(true);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState('');\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n\n//     const getContract = useCallback(async () => {\n//         if (!provider) return null;\n//         const signer = provider.getSigner();\n//         return new ethers.Contract(contractAddress, contractAbi, signer);\n//     }, [provider]);\n\n//     const fetchInitialData = useCallback(async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const [candidatesList, time, status] = await Promise.all([\n//                 contract.getAllVotesOfCandidates(),\n//                 contract.getRemainingTime(),\n//                 contract.getVotingStatus()\n//             ]);\n\n//             if (Array.isArray(candidatesList)) {\n//                 const formattedCandidates = candidatesList.map((candidate, index) => ({\n//                     index,\n//                     name: candidate.name,\n//                     voteCount: candidate.voteCount.toNumber(),\n//                     party: candidate.party,\n//                     area: candidate.area\n//                 }));\n//                 setCandidates(formattedCandidates);\n//             }\n\n//             setRemainingTime(parseInt(time.toString(), 10));\n//             setVotingStatus(status);\n//             console.log(\"intial data is fetched\");\n//         } catch (error) {\n//             console.error('Error fetching initial data:', error);\n//         }\n\n//     }, [getContract]);\n\n//     useEffect(() => {\n//         if (provider) {\n//             fetchInitialData();\n//         }\n//     }, [provider, fetchInitialData]);\n\n//     useEffect(() => {\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//             }\n//         };\n//     }, []);\n\n//     const fetchCitizenData = async (aadhar) => {\n//         if (aadhar === \"\") {\n//             setError(\"Aadhaar Number is required.\");\n//             return;\n//         }\n\n//         try {\n//             const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n//             setCitizenData(response.data);\n//             setError(\"\");\n//         } catch (error) {\n//             console.error('Error fetching citizen data:', error);\n//             setError(\"User not found or server error.\");\n//             setCitizenData(null);\n//         }\n//     };\n\n//     const vote = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.vote(number);\n//             await tx.wait();\n//             await checkVotingEligibility();\n//             await fetchInitialData();\n//         } catch (error) {\n//             console.error(\"Error voting:\", error);\n//         }\n//     };\n\n//     const checkVotingEligibility = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const voteStatus = await contract.voters(account);\n//             setCanVote(voteStatus);\n//         } catch (error) {\n//             console.error(\"Error checking eligibility:\", error);\n//         }\n//     };\n\n//     const handleAccountsChanged = (accounts) => {\n//         if (accounts.length > 0 && account !== accounts[0]) {\n//             setAccount(accounts[0]);\n//             checkVotingEligibility();\n//         } else {\n//             setIsConnected(false);\n//             setAccount(null);\n//         }\n//     };\n\n//     const connectToMetamask = async () => {\n//         if (!window.ethereum) {\n//             console.error(\"Metamask is not detected in the browser\");\n//             return;\n//         }\n\n//         try {\n//             const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//             await web3Provider.send(\"eth_requestAccounts\", []);\n//             const signer = web3Provider.getSigner();\n//             const address = await signer.getAddress();\n\n//             setProvider(web3Provider);\n//             setAccount(address);\n//             setIsConnected(true);\n\n//             console.log(\"Metamask Connected : \" + address);\n//         } catch (err) {\n//             console.error(\"Connection error:\", err);\n//         }\n//     };\n\n//     const addCandidate = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.addCandidate(\n//                 newCandidateName, \n//                 newCandidateParty, \n//                 newCandidateArea, \n//                 { gasLimit: 500000 }\n//             );\n//             await tx.wait();\n//             await fetchInitialData();\n//         } catch (err) {\n//             console.error(\"Error adding candidate:\", err.message);\n//         }\n//     };\n\n//     const getResult = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return { name: '', voteCount: 0 };\n\n//             const result = await contract.getResults();\n\n//             if (!Array.isArray(result) || result.length < 2) {\n//                 return { name: '', voteCount: 0 };\n//             }\n\n//             const [winningCandidate, winningVoteCount] = result;\n//             return {\n//                 name: winningCandidate || '',\n//                 voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//             };\n//         } catch (error) {\n//             console.error('Error getting results:', error);\n//             return { name: '', voteCount: 0 };\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             {votingStatus ? (\n//                 isConnected ? (\n//                     <Connected\n//                         account={account}\n//                         candidates={candidates}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData}\n//                         remainingTime={remainingTime}\n//                         number={number}\n//                         handleNumberChange={(e) => setNumber(e.target.value)}\n//                         voteFunction={vote}\n//                         showButton={canVote}\n//                         addCandidate={addCandidate}\n//                         handleCandidateNameChange={(e) => setNewCandidateName(e.target.value)}\n//                         newCandidateName={newCandidateName}\n//                         newCandidateParty={newCandidateParty}\n//                         setNewCandidateParty={setNewCandidateParty}\n//                         newCandidateArea={newCandidateArea}\n//                         setNewCandidateArea={setNewCandidateArea}\n//                         onWalletAddressChange={() => {\n//                             setIsConnected(false);\n//                             setAccount(null);\n//                         }}\n//                     />\n//                 ) : (\n//                     <Login\n//                         connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                         setError={setError} \n//                     />\n//                 )\n//             ) : (\n//                 <Finished getResult={getResult} />\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Voting;\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport { contractAbi, contractAddress } from './constant';\nimport Login from './Login';\nimport Finished from './Finished';\nimport Connected from './Connected';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Voting() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [remainingTime, setRemainingTime] = useState('');\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState('');\n  const [canVote, setCanVote] = useState(true);\n  const [newCandidateName, setNewCandidateName] = useState('');\n  const [newCandidateParty, setNewCandidateParty] = useState('');\n  const [newCandidateArea, setNewCandidateArea] = useState('');\n  const [error, setError] = useState(\"\");\n  const [citizenData, setCitizenData] = useState(null);\n  // Initialize contract once\n  const initializeContract = useCallback(async () => {\n    if (!window.ethereum) {\n      console.error(\"Metamask not detected\");\n      return null;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n      const address = await signer.getAddress();\n      setState(prev => ({\n        ...prev,\n        provider,\n        contract,\n        account: address,\n        isConnected: true\n      }));\n      return contract;\n    } catch (error) {\n      console.error(\"Failed to initialize contract:\", error);\n      return null;\n    }\n  }, []);\n\n  // Fetch blockchain data\n  const fetchBlockchainData = useCallback(async contract => {\n    if (!contract) return;\n    try {\n      setState(prev => ({\n        ...prev,\n        isLoading: true\n      }));\n      const [candidatesList, time, status, voteStatus] = await Promise.all([contract.getAllVotesOfCandidates(), contract.getRemainingTime(), contract.getVotingStatus(), contract.voters(state.account)]);\n      const formattedCandidates = candidatesList.map((candidate, index) => ({\n        index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber(),\n        party: candidate.party,\n        area: candidate.area\n      }));\n      setState(prev => ({\n        ...prev,\n        candidates: formattedCandidates,\n        remainingTime: parseInt(time.toString(), 10),\n        votingStatus: status,\n        canVote: voteStatus,\n        isLoading: false\n      }));\n    } catch (error) {\n      console.error(\"Error fetching blockchain data:\", error);\n      setState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n    }\n  }, [state.account]);\n  useEffect(() => {\n    const init = async () => {\n      const contract = await initializeContract();\n      if (contract) {\n        await fetchBlockchainData(contract);\n      }\n    };\n    init();\n  }, [initializeContract]);\n  const fetchCitizenData = async aadhar => {\n    if (aadhar === \"\") {\n      setError(\"Aadhaar Number is required.\");\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n      setCitizenData(response.data);\n      setError(\"\");\n    } catch (error) {\n      console.error('Error fetching citizen data:', error);\n      setError(\"User not found or server error.\");\n      setCitizenData(null);\n    }\n  };\n  const vote = async () => {\n    if (!state.contract || !state.number) return;\n    try {\n      const tx = await state.contract.vote(state.number);\n      await tx.wait();\n      await fetchBlockchainData(state.contract);\n    } catch (error) {\n      console.error(\"Error voting:\", error);\n    }\n  };\n  const checkVotingEligibility = async () => {\n    try {\n      const contract = await initializeContract();\n      if (!contract) return;\n      const voteStatus = await contract.voters(account);\n      setCanVote(voteStatus);\n    } catch (error) {\n      console.error(\"Error checking eligibility:\", error);\n    }\n  };\n  const handleAccountsChanged = accounts => {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      checkVotingEligibility();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  };\n\n  // Handle MetaMask connection\n  const connectToMetamask = async () => {\n    const contract = await initializeContract();\n    if (contract) {\n      await fetchBlockchainData(contract);\n    }\n  };\n  const addCandidate = async () => {\n    try {\n      const contract = await initializeContract();\n      if (!contract) return;\n      const tx = await contract.addCandidate(newCandidateName, newCandidateParty, newCandidateArea, {\n        gasLimit: 500000\n      });\n      await tx.wait();\n      await fetchInitialData();\n    } catch (err) {\n      console.error(\"Error adding candidate:\", err.message);\n    }\n  };\n  const getResult = async () => {\n    try {\n      const contract = await initializeContract();\n      if (!contract) return {\n        name: '',\n        voteCount: 0\n      };\n      const result = await contract.getResults();\n      if (!Array.isArray(result) || result.length < 2) {\n        return {\n          name: '',\n          voteCount: 0\n        };\n      }\n      const [winningCandidate, winningVoteCount] = result;\n      return {\n        name: winningCandidate || '',\n        voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n      };\n    } catch (error) {\n      console.error('Error getting results:', error);\n      return {\n        name: '',\n        voteCount: 0\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: state.votingStatus ? state.isConnected ? /*#__PURE__*/_jsxDEV(Connected, {\n      account: state.account,\n      candidates: state.candidates,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: state.citizenData,\n      remainingTime: state.remainingTime,\n      number: state.number,\n      handleNumberChange: e => setState(prev => ({\n        ...prev,\n        number: e.target.value\n      })),\n      voteFunction: vote,\n      showButton: state.canVote,\n      onWalletAddressChange: () => setState(prev => ({\n        ...prev,\n        isConnected: false,\n        account: null\n      })),\n      isLoading: state.isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask,\n      fetchCitizenData: fetchCitizenData,\n      citizenData: state.citizenData,\n      error: state.error,\n      setError: error => setState(prev => ({\n        ...prev,\n        error\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Finished, {\n      getResult: getResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 441,\n    columnNumber: 9\n  }, this);\n}\n_s(Voting, \"p0BTHMgS1pMd4zRXeBDrCg6v8A8=\");\n_c = Voting;\nexport default Voting;\nvar _c;\n$RefreshReg$(_c, \"Voting\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ethers","axios","contractAbi","contractAddress","Login","Finished","Connected","jsxDEV","_jsxDEV","Voting","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","remainingTime","setRemainingTime","candidates","setCandidates","number","setNumber","canVote","setCanVote","newCandidateName","setNewCandidateName","newCandidateParty","setNewCandidateParty","newCandidateArea","setNewCandidateArea","error","setError","citizenData","setCitizenData","initializeContract","window","ethereum","console","providers","Web3Provider","send","signer","getSigner","contract","Contract","address","getAddress","setState","prev","fetchBlockchainData","isLoading","candidatesList","time","status","voteStatus","Promise","all","getAllVotesOfCandidates","getRemainingTime","getVotingStatus","voters","state","formattedCandidates","map","candidate","index","name","voteCount","toNumber","party","area","parseInt","toString","init","fetchCitizenData","aadhar","response","get","data","vote","tx","wait","checkVotingEligibility","handleAccountsChanged","accounts","length","connectToMetamask","addCandidate","gasLimit","fetchInitialData","err","message","getResult","result","getResults","Array","isArray","winningCandidate","winningVoteCount","className","children","handleNumberChange","e","target","value","voteFunction","showButton","onWalletAddressChange","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","_c","$RefreshReg$"],"sources":["/Users/rohit/Desktop/projects/FinVote/src/components/Voting.js"],"sourcesContent":["\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// import { contractAbi, contractAddress } from './constant';\n// import Login from './Login';\n// import Finished from './Finished';\n// import Connected from './Connected';\n\n// function Voting() {\n//     const [provider, setProvider] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isConnected, setIsConnected] = useState(false);  \n//     const [votingStatus, setVotingStatus] = useState(true);  \n//     const [remainingTime, setRemainingTime] = useState('');\n//     const [candidates, setCandidates] = useState([]);\n//     const [number, setNumber] = useState('');\n//     const [canVote, setCanVote] = useState(true);\n//     const [newCandidateName, setNewCandidateName] = useState('');\n//     const [newCandidateParty, setNewCandidateParty] = useState('');\n//     const [newCandidateArea, setNewCandidateArea] = useState('');\n//     const [error, setError] = useState(\"\");\n//     const [citizenData, setCitizenData] = useState(null);\n\n//     const getContract = useCallback(async () => {\n//         if (!provider) return null;\n//         const signer = provider.getSigner();\n//         return new ethers.Contract(contractAddress, contractAbi, signer);\n//     }, [provider]);\n\n//     const fetchInitialData = useCallback(async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const [candidatesList, time, status] = await Promise.all([\n//                 contract.getAllVotesOfCandidates(),\n//                 contract.getRemainingTime(),\n//                 contract.getVotingStatus()\n//             ]);\n\n//             if (Array.isArray(candidatesList)) {\n//                 const formattedCandidates = candidatesList.map((candidate, index) => ({\n//                     index,\n//                     name: candidate.name,\n//                     voteCount: candidate.voteCount.toNumber(),\n//                     party: candidate.party,\n//                     area: candidate.area\n//                 }));\n//                 setCandidates(formattedCandidates);\n//             }\n\n//             setRemainingTime(parseInt(time.toString(), 10));\n//             setVotingStatus(status);\n//             console.log(\"intial data is fetched\");\n//         } catch (error) {\n//             console.error('Error fetching initial data:', error);\n//         }\n        \n//     }, [getContract]);\n\n//     useEffect(() => {\n//         if (provider) {\n//             fetchInitialData();\n//         }\n//     }, [provider, fetchInitialData]);\n\n//     useEffect(() => {\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//             }\n//         };\n//     }, []);\n\n//     const fetchCitizenData = async (aadhar) => {\n//         if (aadhar === \"\") {\n//             setError(\"Aadhaar Number is required.\");\n//             return;\n//         }\n\n//         try {\n//             const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n//             setCitizenData(response.data);\n//             setError(\"\");\n//         } catch (error) {\n//             console.error('Error fetching citizen data:', error);\n//             setError(\"User not found or server error.\");\n//             setCitizenData(null);\n//         }\n//     };\n\n//     const vote = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.vote(number);\n//             await tx.wait();\n//             await checkVotingEligibility();\n//             await fetchInitialData();\n//         } catch (error) {\n//             console.error(\"Error voting:\", error);\n//         }\n//     };\n\n//     const checkVotingEligibility = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const voteStatus = await contract.voters(account);\n//             setCanVote(voteStatus);\n//         } catch (error) {\n//             console.error(\"Error checking eligibility:\", error);\n//         }\n//     };\n\n//     const handleAccountsChanged = (accounts) => {\n//         if (accounts.length > 0 && account !== accounts[0]) {\n//             setAccount(accounts[0]);\n//             checkVotingEligibility();\n//         } else {\n//             setIsConnected(false);\n//             setAccount(null);\n//         }\n//     };\n\n//     const connectToMetamask = async () => {\n//         if (!window.ethereum) {\n//             console.error(\"Metamask is not detected in the browser\");\n//             return;\n//         }\n\n//         try {\n//             const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//             await web3Provider.send(\"eth_requestAccounts\", []);\n//             const signer = web3Provider.getSigner();\n//             const address = await signer.getAddress();\n\n//             setProvider(web3Provider);\n//             setAccount(address);\n//             setIsConnected(true);\n            \n//             console.log(\"Metamask Connected : \" + address);\n//         } catch (err) {\n//             console.error(\"Connection error:\", err);\n//         }\n//     };\n\n//     const addCandidate = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return;\n\n//             const tx = await contract.addCandidate(\n//                 newCandidateName, \n//                 newCandidateParty, \n//                 newCandidateArea, \n//                 { gasLimit: 500000 }\n//             );\n//             await tx.wait();\n//             await fetchInitialData();\n//         } catch (err) {\n//             console.error(\"Error adding candidate:\", err.message);\n//         }\n//     };\n\n//     const getResult = async () => {\n//         try {\n//             const contract = await getContract();\n//             if (!contract) return { name: '', voteCount: 0 };\n\n//             const result = await contract.getResults();\n            \n//             if (!Array.isArray(result) || result.length < 2) {\n//                 return { name: '', voteCount: 0 };\n//             }\n\n//             const [winningCandidate, winningVoteCount] = result;\n//             return {\n//                 name: winningCandidate || '',\n//                 voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n//             };\n//         } catch (error) {\n//             console.error('Error getting results:', error);\n//             return { name: '', voteCount: 0 };\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             {votingStatus ? (\n//                 isConnected ? (\n//                     <Connected\n//                         account={account}\n//                         candidates={candidates}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData}\n//                         remainingTime={remainingTime}\n//                         number={number}\n//                         handleNumberChange={(e) => setNumber(e.target.value)}\n//                         voteFunction={vote}\n//                         showButton={canVote}\n//                         addCandidate={addCandidate}\n//                         handleCandidateNameChange={(e) => setNewCandidateName(e.target.value)}\n//                         newCandidateName={newCandidateName}\n//                         newCandidateParty={newCandidateParty}\n//                         setNewCandidateParty={setNewCandidateParty}\n//                         newCandidateArea={newCandidateArea}\n//                         setNewCandidateArea={setNewCandidateArea}\n//                         onWalletAddressChange={() => {\n//                             setIsConnected(false);\n//                             setAccount(null);\n//                         }}\n//                     />\n//                 ) : (\n//                     <Login\n//                         connectWallet={connectToMetamask}\n//                         fetchCitizenData={fetchCitizenData}\n//                         citizenData={citizenData} \n//                         error={error} \n//                         setError={setError} \n//                     />\n//                 )\n//             ) : (\n//                 <Finished getResult={getResult} />\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Voting;\n\n\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport { contractAbi, contractAddress } from './constant';\nimport Login from './Login';\nimport Finished from './Finished';\nimport Connected from './Connected';\n\nfunction Voting() {\n    const [provider, setProvider] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);  \n    const [votingStatus, setVotingStatus] = useState(true);  \n    const [remainingTime, setRemainingTime] = useState('');\n    const [candidates, setCandidates] = useState([]);\n    const [number, setNumber] = useState('');\n    const [canVote, setCanVote] = useState(true);\n    const [newCandidateName, setNewCandidateName] = useState('');\n    const [newCandidateParty, setNewCandidateParty] = useState('');\n    const [newCandidateArea, setNewCandidateArea] = useState('');\n    const [error, setError] = useState(\"\");\n    const [citizenData, setCitizenData] = useState(null);\n// Initialize contract once\nconst initializeContract = useCallback(async () => {\n    if (!window.ethereum) {\n        console.error(\"Metamask not detected\");\n        return null;\n    }\n\n    try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractAbi, signer);\n        const address = await signer.getAddress();\n\n        setState(prev => ({\n            ...prev,\n            provider,\n            contract,\n            account: address,\n            isConnected: true\n        }));\n\n        return contract;\n    } catch (error) {\n        console.error(\"Failed to initialize contract:\", error);\n        return null;\n    }\n}, []);\n\n// Fetch blockchain data\nconst fetchBlockchainData = useCallback(async (contract) => {\n    if (!contract) return;\n\n    try {\n        setState(prev => ({ ...prev, isLoading: true }));\n\n        const [candidatesList, time, status, voteStatus] = await Promise.all([\n            contract.getAllVotesOfCandidates(),\n            contract.getRemainingTime(),\n            contract.getVotingStatus(),\n            contract.voters(state.account)\n        ]);\n\n        const formattedCandidates = candidatesList.map((candidate, index) => ({\n            index,\n            name: candidate.name,\n            voteCount: candidate.voteCount.toNumber(),\n            party: candidate.party,\n            area: candidate.area\n        }));\n\n        setState(prev => ({\n            ...prev,\n            candidates: formattedCandidates,\n            remainingTime: parseInt(time.toString(), 10),\n            votingStatus: status,\n            canVote: voteStatus,\n            isLoading: false\n        }));\n    } catch (error) {\n        console.error(\"Error fetching blockchain data:\", error);\n        setState(prev => ({ ...prev, isLoading: false }));\n    }\n}, [state.account]);\n\n\nuseEffect(() => {\n    const init = async () => {\n        const contract = await initializeContract();\n        if (contract) {\n            await fetchBlockchainData(contract);\n        }\n    };\n\n    init();\n}, [initializeContract]);\n\n    const fetchCitizenData = async (aadhar) => {\n        if (aadhar === \"\") {\n            setError(\"Aadhaar Number is required.\");\n            return;\n        }\n\n        try {\n            const response = await axios.get(`http://localhost:4000/users/${aadhar}`);\n            setCitizenData(response.data);\n            setError(\"\");\n        } catch (error) {\n            console.error('Error fetching citizen data:', error);\n            setError(\"User not found or server error.\");\n            setCitizenData(null);\n        }\n    };\n\n    const vote = async () => {\n        if (!state.contract || !state.number) return;\n\n        try {\n            const tx = await state.contract.vote(state.number);\n            await tx.wait();\n            await fetchBlockchainData(state.contract);\n        } catch (error) {\n            console.error(\"Error voting:\", error);\n        }\n    };\n\n\n    const checkVotingEligibility = async () => {\n        try {\n            const contract = await initializeContract();\n            if (!contract) return;\n\n            const voteStatus = await contract.voters(account);\n            setCanVote(voteStatus);\n        } catch (error) {\n            console.error(\"Error checking eligibility:\", error);\n        }\n    };\n\n    const handleAccountsChanged = (accounts) => {\n        if (accounts.length > 0 && account !== accounts[0]) {\n            setAccount(accounts[0]);\n            checkVotingEligibility();\n        } else {\n            setIsConnected(false);\n            setAccount(null);\n        }\n    };\n\n    // Handle MetaMask connection\n    const connectToMetamask = async () => {\n        const contract = await initializeContract();\n        if (contract) {\n            await fetchBlockchainData(contract);\n        }\n    };\n\n    const addCandidate = async () => {\n        try {\n            const contract = await initializeContract();\n            if (!contract) return;\n\n            const tx = await contract.addCandidate(\n                newCandidateName, \n                newCandidateParty, \n                newCandidateArea, \n                { gasLimit: 500000 }\n            );\n            await tx.wait();\n            await fetchInitialData();\n        } catch (err) {\n            console.error(\"Error adding candidate:\", err.message);\n        }\n    };\n\n    const getResult = async () => {\n        try {\n            const contract = await initializeContract();\n            if (!contract) return { name: '', voteCount: 0 };\n\n            const result = await contract.getResults();\n            \n            if (!Array.isArray(result) || result.length < 2) {\n                return { name: '', voteCount: 0 };\n            }\n\n            const [winningCandidate, winningVoteCount] = result;\n            return {\n                name: winningCandidate || '',\n                voteCount: winningVoteCount ? winningVoteCount.toNumber() : 0\n            };\n        } catch (error) {\n            console.error('Error getting results:', error);\n            return { name: '', voteCount: 0 };\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            {state.votingStatus ? (\n                state.isConnected ? (\n                    <Connected\n                        account={state.account}\n                        candidates={state.candidates}\n                        fetchCitizenData={fetchCitizenData}\n                        citizenData={state.citizenData}\n                        remainingTime={state.remainingTime}\n                        number={state.number}\n                        handleNumberChange={(e) => setState(prev => ({ ...prev, number: e.target.value }))}\n                        voteFunction={vote}\n                        showButton={state.canVote}\n                        onWalletAddressChange={() => setState(prev => ({ ...prev, isConnected: false, account: null }))}\n                        isLoading={state.isLoading}\n                    />\n                ) : (\n                    <Login\n                        connectWallet={connectToMetamask}\n                        fetchCitizenData={fetchCitizenData}\n                        citizenData={state.citizenData}\n                        error={state.error}\n                        setError={(error) => setState(prev => ({ ...prev, error }))}\n                    />\n                )\n            ) : (\n                <Finished getResult={getResult} />\n            )}\n        </div>\n    );\n}\n\nexport default Voting;\n\n\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}